{
 "/_scriptapi_argument.h/Add": {
  "Fn": "Script::Argument::Add",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Argument::Add(params[\"info\"].get\u003cconst ArgumentInfo *\u003e()};\n",
  "Params": [
   {
    "Name": "info",
    "Type": "*ArgumentInfo ",
    "CType": "const ArgumentInfo *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_argument.h/Clear": {
  "Fn": "Script::Argument::Clear",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Argument::Clear(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_argument.h/Delete": {
  "Fn": "Script::Argument::Delete",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Argument::Delete(params[\"address\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "address",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_argument.h/DeleteRange": {
  "Fn": "Script::Argument::DeleteRange",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Argument::DeleteRange(params[\"start\"].get\u003cduint\u003e(), params[\"end\"].get\u003cduint\u003e(), params[\"deleteManual\"].get\u003cbool\u003e()};\n",
  "Params": [
   {
    "Name": "start",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "end",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "deleteManual",
    "Type": "bool",
    "CType": "bool"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_argument.h/Get": {
  "Fn": "Script::Argument::Get",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Argument::Get(params[\"addr\"].get\u003cduint\u003e(), params[\"start\"].get\u003cduint *\u003e(), params[\"end\"].get\u003cduint *\u003e(), params[\"instructionCount\"].get\u003cduint *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "start",
    "Type": "*uint ",
    "CType": "duint *"
   },
   {
    "Name": "end",
    "Type": "*uint ",
    "CType": "duint *"
   },
   {
    "Name": "instructionCount",
    "Type": "*uint ",
    "CType": "duint *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_argument.h/GetInfo": {
  "Fn": "Script::Argument::GetInfo",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Argument::GetInfo(params[\"addr\"].get\u003cduint\u003e(), params[\"info\"].get\u003cArgumentInfo *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "info",
    "Type": "*ArgumentInfo ",
    "CType": "ArgumentInfo *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_argument.h/GetList": {
  "Fn": "Script::Argument::GetList",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Argument::GetList(params[\"list\"].get\u003cListInfo *\u003e()};\n",
  "Params": [
   {
    "Name": "list",
    "Type": "*ListInfo ",
    "CType": "ListInfo *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_argument.h/Overlaps": {
  "Fn": "Script::Argument::Overlaps",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Argument::Overlaps(params[\"start\"].get\u003cduint\u003e(), params[\"end\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "start",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "end",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_assembler.h/Assemble": {
  "Fn": "Script::Assembler::Assemble",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Assembler::Assemble(params[\"addr\"].get\u003cduint\u003e(), params[\"dest\"].get\u003cunsigned char *\u003e(), params[\"size\"].get\u003cint *\u003e(), params[\"instruction\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "dest",
    "Type": "*byte ",
    "CType": "unsigned char *"
   },
   {
    "Name": "size",
    "Type": "*int ",
    "CType": "int *"
   },
   {
    "Name": "instruction",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_assembler.h/AssembleEx": {
  "Fn": "Script::Assembler::AssembleEx",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Assembler::AssembleEx(params[\"addr\"].get\u003cduint\u003e(), params[\"dest\"].get\u003cunsigned char *\u003e(), params[\"size\"].get\u003cint *\u003e(), params[\"instruction\"].get\u003cconst char *\u003e(), params[\"error\"].get\u003cchar *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "dest",
    "Type": "*byte ",
    "CType": "unsigned char *"
   },
   {
    "Name": "size",
    "Type": "*int ",
    "CType": "int *"
   },
   {
    "Name": "instruction",
    "Type": "string",
    "CType": "const char *"
   },
   {
    "Name": "error",
    "Type": "*int8 ",
    "CType": "char *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_assembler.h/AssembleMem": {
  "Fn": "Script::Assembler::AssembleMem",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Assembler::AssembleMem(params[\"addr\"].get\u003cduint\u003e(), params[\"instruction\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "instruction",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_assembler.h/AssembleMemEx": {
  "Fn": "Script::Assembler::AssembleMemEx",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Assembler::AssembleMemEx(params[\"addr\"].get\u003cduint\u003e(), params[\"instruction\"].get\u003cconst char *\u003e(), params[\"size\"].get\u003cint *\u003e(), params[\"error\"].get\u003cchar *\u003e(), params[\"fillnop\"].get\u003cbool\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "instruction",
    "Type": "string",
    "CType": "const char *"
   },
   {
    "Name": "size",
    "Type": "*int ",
    "CType": "int *"
   },
   {
    "Name": "error",
    "Type": "*int8 ",
    "CType": "char *"
   },
   {
    "Name": "fillnop",
    "Type": "bool",
    "CType": "bool"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_bookmark.h/Clear": {
  "Fn": "Script::Bookmark::Clear",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Bookmark::Clear(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_bookmark.h/Delete": {
  "Fn": "Script::Bookmark::Delete",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Bookmark::Delete(params[\"addr\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_bookmark.h/DeleteRange": {
  "Fn": "Script::Bookmark::DeleteRange",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Bookmark::DeleteRange(params[\"start\"].get\u003cduint\u003e(), params[\"end\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "start",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "end",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_bookmark.h/Get": {
  "Fn": "Script::Bookmark::Get",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Bookmark::Get(params[\"addr\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_bookmark.h/GetInfo": {
  "Fn": "Script::Bookmark::GetInfo",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Bookmark::GetInfo(params[\"addr\"].get\u003cduint\u003e(), params[\"info\"].get\u003cBookmarkInfo *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "info",
    "Type": "*BookmarkInfo ",
    "CType": "BookmarkInfo *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_bookmark.h/GetList": {
  "Fn": "Script::Bookmark::GetList",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Bookmark::GetList(params[\"list\"].get\u003cListInfo *\u003e()};\n",
  "Params": [
   {
    "Name": "list",
    "Type": "*ListInfo ",
    "CType": "ListInfo *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_bookmark.h/Set": {
  "Fn": "Script::Bookmark::Set",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Bookmark::Set(params[\"info\"].get\u003cconst BookmarkInfo *\u003e()};\n",
  "Params": [
   {
    "Name": "info",
    "Type": "*BookmarkInfo ",
    "CType": "const BookmarkInfo *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_comment.h/Clear": {
  "Fn": "Script::Comment::Clear",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Comment::Clear(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_comment.h/Delete": {
  "Fn": "Script::Comment::Delete",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Comment::Delete(params[\"addr\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_comment.h/DeleteRange": {
  "Fn": "Script::Comment::DeleteRange",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Comment::DeleteRange(params[\"start\"].get\u003cduint\u003e(), params[\"end\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "start",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "end",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_comment.h/Get": {
  "Fn": "Script::Comment::Get",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Comment::Get(params[\"addr\"].get\u003cduint\u003e(), params[\"text\"].get\u003cchar *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "text",
    "Type": "*int8 ",
    "CType": "char *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_comment.h/GetInfo": {
  "Fn": "Script::Comment::GetInfo",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Comment::GetInfo(params[\"addr\"].get\u003cduint\u003e(), params[\"info\"].get\u003cCommentInfo *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "info",
    "Type": "*CommentInfo ",
    "CType": "CommentInfo *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_comment.h/GetList": {
  "Fn": "Script::Comment::GetList",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Comment::GetList(params[\"list\"].get\u003cListInfo *\u003e()};\n",
  "Params": [
   {
    "Name": "list",
    "Type": "*ListInfo ",
    "CType": "ListInfo *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_comment.h/Set": {
  "Fn": "Script::Comment::Set",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Comment::Set(params[\"info\"].get\u003cconst CommentInfo *\u003e()};\n",
  "Params": [
   {
    "Name": "info",
    "Type": "*CommentInfo ",
    "CType": "const CommentInfo *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_debug.h/DeleteBreakpoint": {
  "Fn": "Script::Debug::DeleteBreakpoint",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Debug::DeleteBreakpoint(params[\"address\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "address",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_debug.h/DeleteHardwareBreakpoint": {
  "Fn": "Script::Debug::DeleteHardwareBreakpoint",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Debug::DeleteHardwareBreakpoint(params[\"address\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "address",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_debug.h/DisableBreakpoint": {
  "Fn": "Script::Debug::DisableBreakpoint",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Debug::DisableBreakpoint(params[\"address\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "address",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_debug.h/Pause": {
  "Fn": "Script::Debug::Pause",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Debug::Pause(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_debug.h/Run": {
  "Fn": "Script::Debug::Run",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Debug::Run(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_debug.h/SetBreakpoint": {
  "Fn": "Script::Debug::SetBreakpoint",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Debug::SetBreakpoint(params[\"address\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "address",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_debug.h/SetHardwareBreakpoint": {
  "Fn": "Script::Debug::SetHardwareBreakpoint",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Debug::SetHardwareBreakpoint(params[\"address\"].get\u003cduint\u003e(), params[\"Type\"].get\u003cHardwareType\u003e()};\n",
  "Params": [
   {
    "Name": "address",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "Type",
    "Type": "HardwareType",
    "CType": "HardwareType"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_debug.h/StepIn": {
  "Fn": "Script::Debug::StepIn",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Debug::StepIn(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_debug.h/StepOut": {
  "Fn": "Script::Debug::StepOut",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Debug::StepOut(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_debug.h/StepOver": {
  "Fn": "Script::Debug::StepOver",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Debug::StepOver(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_debug.h/Stop": {
  "Fn": "Script::Debug::Stop",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Debug::Stop(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_debug.h/Wait": {
  "Fn": "Script::Debug::Wait",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Debug::Wait(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_flag.h/Get": {
  "Fn": "Script::Flag::Get",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Flag::Get(params[\"flag\"].get\u003cFlagEnum\u003e()};\n",
  "Params": [
   {
    "Name": "flag",
    "Type": "FlagEnum",
    "CType": "FlagEnum"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_flag.h/GetAF": {
  "Fn": "Script::Flag::GetAF",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Flag::GetAF(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_flag.h/GetCF": {
  "Fn": "Script::Flag::GetCF",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Flag::GetCF(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_flag.h/GetDF": {
  "Fn": "Script::Flag::GetDF",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Flag::GetDF(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_flag.h/GetIF": {
  "Fn": "Script::Flag::GetIF",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Flag::GetIF(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_flag.h/GetOF": {
  "Fn": "Script::Flag::GetOF",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Flag::GetOF(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_flag.h/GetPF": {
  "Fn": "Script::Flag::GetPF",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Flag::GetPF(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_flag.h/GetSF": {
  "Fn": "Script::Flag::GetSF",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Flag::GetSF(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_flag.h/GetTF": {
  "Fn": "Script::Flag::GetTF",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Flag::GetTF(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_flag.h/GetZF": {
  "Fn": "Script::Flag::GetZF",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Flag::GetZF(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_flag.h/Set": {
  "Fn": "Script::Flag::Set",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Flag::Set(params[\"flag\"].get\u003cFlagEnum\u003e(), params[\"value\"].get\u003cbool\u003e()};\n",
  "Params": [
   {
    "Name": "flag",
    "Type": "FlagEnum",
    "CType": "FlagEnum"
   },
   {
    "Name": "value",
    "Type": "bool",
    "CType": "bool"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_flag.h/SetAF": {
  "Fn": "Script::Flag::SetAF",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Flag::SetAF(params[\"value\"].get\u003cbool\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "bool",
    "CType": "bool"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_flag.h/SetCF": {
  "Fn": "Script::Flag::SetCF",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Flag::SetCF(params[\"value\"].get\u003cbool\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "bool",
    "CType": "bool"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_flag.h/SetDF": {
  "Fn": "Script::Flag::SetDF",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Flag::SetDF(params[\"value\"].get\u003cbool\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "bool",
    "CType": "bool"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_flag.h/SetIF": {
  "Fn": "Script::Flag::SetIF",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Flag::SetIF(params[\"value\"].get\u003cbool\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "bool",
    "CType": "bool"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_flag.h/SetOF": {
  "Fn": "Script::Flag::SetOF",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Flag::SetOF(params[\"value\"].get\u003cbool\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "bool",
    "CType": "bool"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_flag.h/SetPF": {
  "Fn": "Script::Flag::SetPF",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Flag::SetPF(params[\"value\"].get\u003cbool\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "bool",
    "CType": "bool"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_flag.h/SetSF": {
  "Fn": "Script::Flag::SetSF",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Flag::SetSF(params[\"value\"].get\u003cbool\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "bool",
    "CType": "bool"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_flag.h/SetTF": {
  "Fn": "Script::Flag::SetTF",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Flag::SetTF(params[\"value\"].get\u003cbool\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "bool",
    "CType": "bool"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_flag.h/SetZF": {
  "Fn": "Script::Flag::SetZF",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Flag::SetZF(params[\"value\"].get\u003cbool\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "bool",
    "CType": "bool"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_function.h/Add": {
  "Fn": "Script::Function::Add",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Function::Add(params[\"info\"].get\u003cconst FunctionInfo *\u003e()};\n",
  "Params": [
   {
    "Name": "info",
    "Type": "*FunctionInfo ",
    "CType": "const FunctionInfo *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_function.h/Clear": {
  "Fn": "Script::Function::Clear",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Function::Clear(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_function.h/Delete": {
  "Fn": "Script::Function::Delete",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Function::Delete(params[\"address\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "address",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_function.h/DeleteRange": {
  "Fn": "Script::Function::DeleteRange",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Function::DeleteRange(params[\"start\"].get\u003cduint\u003e(), params[\"end\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "start",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "end",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_function.h/Get": {
  "Fn": "Script::Function::Get",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Function::Get(params[\"addr\"].get\u003cduint\u003e(), params[\"start\"].get\u003cduint *\u003e(), params[\"end\"].get\u003cduint *\u003e(), params[\"instructionCount\"].get\u003cduint *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "start",
    "Type": "*uint ",
    "CType": "duint *"
   },
   {
    "Name": "end",
    "Type": "*uint ",
    "CType": "duint *"
   },
   {
    "Name": "instructionCount",
    "Type": "*uint ",
    "CType": "duint *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_function.h/GetInfo": {
  "Fn": "Script::Function::GetInfo",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Function::GetInfo(params[\"addr\"].get\u003cduint\u003e(), params[\"info\"].get\u003cFunctionInfo *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "info",
    "Type": "*FunctionInfo ",
    "CType": "FunctionInfo *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_function.h/GetList": {
  "Fn": "Script::Function::GetList",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Function::GetList(params[\"list\"].get\u003cListInfo *\u003e()};\n",
  "Params": [
   {
    "Name": "list",
    "Type": "*ListInfo ",
    "CType": "ListInfo *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_function.h/Overlaps": {
  "Fn": "Script::Function::Overlaps",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Function::Overlaps(params[\"start\"].get\u003cduint\u003e(), params[\"end\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "start",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "end",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_gui.h/AddQWidgetTab": {
  "Fn": "Script::Gui::AddQWidgetTab",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Gui::AddQWidgetTab(params[\"qWidget\"].get\u003cvoid *\u003e()};\n",
  "Params": [
   {
    "Name": "qWidget",
    "Type": "*uintptr ",
    "CType": "void *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_gui.h/CloseQWidgetTab": {
  "Fn": "Script::Gui::CloseQWidgetTab",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Gui::CloseQWidgetTab(params[\"qWidget\"].get\u003cvoid *\u003e()};\n",
  "Params": [
   {
    "Name": "qWidget",
    "Type": "*uintptr ",
    "CType": "void *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_gui.h/InputLine": {
  "Fn": "Script::Gui::InputLine",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Gui::InputLine(params[\"title\"].get\u003cconst char *\u003e(), params[\"text\"].get\u003cchar *\u003e()};\n",
  "Params": [
   {
    "Name": "title",
    "Type": "string",
    "CType": "const char *"
   },
   {
    "Name": "text",
    "Type": "*int8 ",
    "CType": "char *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_gui.h/InputValue": {
  "Fn": "Script::Gui::InputValue",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Gui::InputValue(params[\"title\"].get\u003cconst char *\u003e(), params[\"value\"].get\u003cduint *\u003e()};\n",
  "Params": [
   {
    "Name": "title",
    "Type": "string",
    "CType": "const char *"
   },
   {
    "Name": "value",
    "Type": "*uint ",
    "CType": "duint *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_gui.h/Message": {
  "Fn": "Script::Gui::Message",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Gui::Message(params[\"message\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "message",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_gui.h/MessageYesNo": {
  "Fn": "Script::Gui::MessageYesNo",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Gui::MessageYesNo(params[\"message\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "message",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_gui.h/Refresh": {
  "Fn": "Script::Gui::Refresh",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Gui::Refresh(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_gui.h/SelectionGet": {
  "Fn": "Script::Gui::SelectionGet",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Gui::SelectionGet(params[\"window\"].get\u003cWindow\u003e(), params[\"start\"].get\u003cduint *\u003e(), params[\"end\"].get\u003cduint *\u003e()};\n",
  "Params": [
   {
    "Name": "window",
    "Type": "Window",
    "CType": "Window"
   },
   {
    "Name": "start",
    "Type": "*uint ",
    "CType": "duint *"
   },
   {
    "Name": "end",
    "Type": "*uint ",
    "CType": "duint *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_gui.h/SelectionGetEnd": {
  "Fn": "Script::Gui::SelectionGetEnd",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Gui::SelectionGetEnd(params[\"window\"].get\u003cWindow\u003e()};\n",
  "Params": [
   {
    "Name": "window",
    "Type": "Window",
    "CType": "Window"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_gui.h/SelectionGetStart": {
  "Fn": "Script::Gui::SelectionGetStart",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Gui::SelectionGetStart(params[\"window\"].get\u003cWindow\u003e()};\n",
  "Params": [
   {
    "Name": "window",
    "Type": "Window",
    "CType": "Window"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_gui.h/SelectionSet": {
  "Fn": "Script::Gui::SelectionSet",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Gui::SelectionSet(params[\"window\"].get\u003cWindow\u003e(), params[\"start\"].get\u003cduint\u003e(), params[\"end\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "window",
    "Type": "Window",
    "CType": "Window"
   },
   {
    "Name": "start",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "end",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_gui.h/ShowQWidgetTab": {
  "Fn": "Script::Gui::ShowQWidgetTab",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Gui::ShowQWidgetTab(params[\"qWidget\"].get\u003cvoid *\u003e()};\n",
  "Params": [
   {
    "Name": "qWidget",
    "Type": "*uintptr ",
    "CType": "void *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_label.h/Clear": {
  "Fn": "Script::Label::Clear",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Label::Clear(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_label.h/Delete": {
  "Fn": "Script::Label::Delete",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Label::Delete(params[\"addr\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_label.h/DeleteRange": {
  "Fn": "Script::Label::DeleteRange",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Label::DeleteRange(params[\"start\"].get\u003cduint\u003e(), params[\"end\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "start",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "end",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_label.h/FromString": {
  "Fn": "Script::Label::FromString",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Label::FromString(params[\"label\"].get\u003cconst char *\u003e(), params[\"addr\"].get\u003cduint *\u003e()};\n",
  "Params": [
   {
    "Name": "label",
    "Type": "string",
    "CType": "const char *"
   },
   {
    "Name": "addr",
    "Type": "*uint ",
    "CType": "duint *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_label.h/Get": {
  "Fn": "Script::Label::Get",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Label::Get(params[\"addr\"].get\u003cduint\u003e(), params[\"text\"].get\u003cchar *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "text",
    "Type": "*int8 ",
    "CType": "char *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_label.h/GetInfo": {
  "Fn": "Script::Label::GetInfo",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Label::GetInfo(params[\"addr\"].get\u003cduint\u003e(), params[\"info\"].get\u003cLabelInfo *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "info",
    "Type": "*LabelInfo ",
    "CType": "LabelInfo *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_label.h/GetList": {
  "Fn": "Script::Label::GetList",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Label::GetList(params[\"list\"].get\u003cListInfo *\u003e()};\n",
  "Params": [
   {
    "Name": "list",
    "Type": "*ListInfo ",
    "CType": "ListInfo *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_label.h/IsTemporary": {
  "Fn": "Script::Label::IsTemporary",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Label::IsTemporary(params[\"addr\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_label.h/Set": {
  "Fn": "Script::Label::Set",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Label::Set(params[\"info\"].get\u003cconst LabelInfo *\u003e()};\n",
  "Params": [
   {
    "Name": "info",
    "Type": "*LabelInfo ",
    "CType": "const LabelInfo *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_memory.h/GetBase": {
  "Fn": "Script::Memory::GetBase",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Memory::GetBase(params[\"addr\"].get\u003cduint\u003e(), params[\"reserved\"].get\u003cbool\u003e(), params[\"cache\"].get\u003cbool\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "reserved",
    "Type": "bool",
    "CType": "bool"
   },
   {
    "Name": "cache",
    "Type": "bool",
    "CType": "bool"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_memory.h/GetProtect": {
  "Fn": "Script::Memory::GetProtect",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Memory::GetProtect(params[\"addr\"].get\u003cduint\u003e(), params[\"reserved\"].get\u003cbool\u003e(), params[\"cache\"].get\u003cbool\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "reserved",
    "Type": "bool",
    "CType": "bool"
   },
   {
    "Name": "cache",
    "Type": "bool",
    "CType": "bool"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_memory.h/GetSize": {
  "Fn": "Script::Memory::GetSize",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Memory::GetSize(params[\"addr\"].get\u003cduint\u003e(), params[\"reserved\"].get\u003cbool\u003e(), params[\"cache\"].get\u003cbool\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "reserved",
    "Type": "bool",
    "CType": "bool"
   },
   {
    "Name": "cache",
    "Type": "bool",
    "CType": "bool"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_memory.h/IsValidPtr": {
  "Fn": "Script::Memory::IsValidPtr",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Memory::IsValidPtr(params[\"addr\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_memory.h/Read": {
  "Fn": "Script::Memory::Read",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Memory::Read(params[\"addr\"].get\u003cduint\u003e(), params[\"data\"].get\u003cvoid *\u003e(), params[\"size\"].get\u003cduint\u003e(), params[\"sizeRead\"].get\u003cduint *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "data",
    "Type": "*uintptr ",
    "CType": "void *"
   },
   {
    "Name": "size",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "sizeRead",
    "Type": "*uint ",
    "CType": "duint *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_memory.h/ReadByte": {
  "Fn": "Script::Memory::ReadByte",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Memory::ReadByte(params[\"addr\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_memory.h/ReadDword": {
  "Fn": "Script::Memory::ReadDword",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Memory::ReadDword(params[\"addr\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_memory.h/ReadPtr": {
  "Fn": "Script::Memory::ReadPtr",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Memory::ReadPtr(params[\"addr\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_memory.h/ReadQword": {
  "Fn": "Script::Memory::ReadQword",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Memory::ReadQword(params[\"addr\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_memory.h/ReadWord": {
  "Fn": "Script::Memory::ReadWord",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Memory::ReadWord(params[\"addr\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_memory.h/RemoteAlloc": {
  "Fn": "Script::Memory::RemoteAlloc",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Memory::RemoteAlloc(params[\"addr\"].get\u003cduint\u003e(), params[\"size\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "size",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_memory.h/RemoteFree": {
  "Fn": "Script::Memory::RemoteFree",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Memory::RemoteFree(params[\"addr\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_memory.h/SetProtect": {
  "Fn": "Script::Memory::SetProtect",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Memory::SetProtect(params[\"addr\"].get\u003cduint\u003e(), params[\"protect\"].get\u003cunsigned int\u003e(), params[\"size\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "protect",
    "Type": "uint",
    "CType": "unsigned int"
   },
   {
    "Name": "size",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_memory.h/Write": {
  "Fn": "Script::Memory::Write",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Memory::Write(params[\"addr\"].get\u003cduint\u003e(), params[\"data\"].get\u003cconst void *\u003e(), params[\"size\"].get\u003cduint\u003e(), params[\"sizeWritten\"].get\u003cduint *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "data",
    "Type": "*uintptr ",
    "CType": "const void *"
   },
   {
    "Name": "size",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "sizeWritten",
    "Type": "*uint ",
    "CType": "duint *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_memory.h/WriteByte": {
  "Fn": "Script::Memory::WriteByte",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Memory::WriteByte(params[\"addr\"].get\u003cduint\u003e(), params[\"data\"].get\u003cunsigned char\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "data",
    "Type": "byte",
    "CType": "unsigned char"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_memory.h/WriteDword": {
  "Fn": "Script::Memory::WriteDword",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Memory::WriteDword(params[\"addr\"].get\u003cduint\u003e(), params[\"data\"].get\u003cunsigned int\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "data",
    "Type": "uint",
    "CType": "unsigned int"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_memory.h/WritePtr": {
  "Fn": "Script::Memory::WritePtr",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Memory::WritePtr(params[\"addr\"].get\u003cduint\u003e(), params[\"data\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "data",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_memory.h/WriteQword": {
  "Fn": "Script::Memory::WriteQword",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Memory::WriteQword(params[\"addr\"].get\u003cduint\u003e(), params[\"data\"].get\u003cunsigned long long\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "data",
    "Type": "uint64",
    "CType": "unsigned long long"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_memory.h/WriteWord": {
  "Fn": "Script::Memory::WriteWord",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Memory::WriteWord(params[\"addr\"].get\u003cduint\u003e(), params[\"data\"].get\u003cunsigned short\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "data",
    "Type": "uint16",
    "CType": "unsigned short"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_misc.h/Alloc": {
  "Fn": "Script::Misc::Alloc",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Misc::Alloc(params[\"size\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "size",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_misc.h/Free": {
  "Fn": "Script::Misc::Free",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Misc::Free(params[\"ptr\"].get\u003cvoid *\u003e()};\n",
  "Params": [
   {
    "Name": "ptr",
    "Type": "*uintptr ",
    "CType": "void *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_misc.h/ParseExpression": {
  "Fn": "Script::Misc::ParseExpression",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Misc::ParseExpression(params[\"expression\"].get\u003cconst char *\u003e(), params[\"value\"].get\u003cduint *\u003e()};\n",
  "Params": [
   {
    "Name": "expression",
    "Type": "string",
    "CType": "const char *"
   },
   {
    "Name": "value",
    "Type": "*uint ",
    "CType": "duint *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_misc.h/RemoteGetProcAddress": {
  "Fn": "Script::Misc::RemoteGetProcAddress",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Misc::RemoteGetProcAddress(params[\"module\"].get\u003cconst char *\u003e(), params[\"api\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "module",
    "Type": "string",
    "CType": "const char *"
   },
   {
    "Name": "api",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_misc.h/ResolveLabel": {
  "Fn": "Script::Misc::ResolveLabel",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Misc::ResolveLabel(params[\"label\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "label",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_module.h/BaseFromAddr": {
  "Fn": "Script::Module::BaseFromAddr",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Module::BaseFromAddr(params[\"addr\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_module.h/BaseFromName": {
  "Fn": "Script::Module::BaseFromName",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Module::BaseFromName(params[\"name\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "name",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_module.h/EntryFromAddr": {
  "Fn": "Script::Module::EntryFromAddr",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Module::EntryFromAddr(params[\"addr\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_module.h/EntryFromName": {
  "Fn": "Script::Module::EntryFromName",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Module::EntryFromName(params[\"name\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "name",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_module.h/GetExports": {
  "Fn": "Script::Module::GetExports",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Module::GetExports(params[\"mod\"].get\u003cconst ModuleInfo *\u003e(), params[\"list\"].get\u003cListInfo *\u003e()};\n",
  "Params": [
   {
    "Name": "mod",
    "Type": "*ModuleInfo ",
    "CType": "const ModuleInfo *"
   },
   {
    "Name": "list",
    "Type": "*ListInfo ",
    "CType": "ListInfo *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_module.h/GetImports": {
  "Fn": "Script::Module::GetImports",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Module::GetImports(params[\"mod\"].get\u003cconst ModuleInfo *\u003e(), params[\"list\"].get\u003cListInfo *\u003e()};\n",
  "Params": [
   {
    "Name": "mod",
    "Type": "*ModuleInfo ",
    "CType": "const ModuleInfo *"
   },
   {
    "Name": "list",
    "Type": "*ListInfo ",
    "CType": "ListInfo *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_module.h/GetList": {
  "Fn": "Script::Module::GetList",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Module::GetList(params[\"list\"].get\u003cListInfo *\u003e()};\n",
  "Params": [
   {
    "Name": "list",
    "Type": "*ListInfo ",
    "CType": "ListInfo *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_module.h/GetMainModuleBase": {
  "Fn": "Script::Module::GetMainModuleBase",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Module::GetMainModuleBase(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_module.h/GetMainModuleEntry": {
  "Fn": "Script::Module::GetMainModuleEntry",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Module::GetMainModuleEntry(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_module.h/GetMainModuleInfo": {
  "Fn": "Script::Module::GetMainModuleInfo",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Module::GetMainModuleInfo(params[\"info\"].get\u003cModuleInfo *\u003e()};\n",
  "Params": [
   {
    "Name": "info",
    "Type": "*ModuleInfo ",
    "CType": "ModuleInfo *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_module.h/GetMainModuleName": {
  "Fn": "Script::Module::GetMainModuleName",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Module::GetMainModuleName(params[\"name\"].get\u003cchar *\u003e()};\n",
  "Params": [
   {
    "Name": "name",
    "Type": "*int8 ",
    "CType": "char *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_module.h/GetMainModulePath": {
  "Fn": "Script::Module::GetMainModulePath",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Module::GetMainModulePath(params[\"path\"].get\u003cchar *\u003e()};\n",
  "Params": [
   {
    "Name": "path",
    "Type": "*int8 ",
    "CType": "char *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_module.h/GetMainModuleSectionCount": {
  "Fn": "Script::Module::GetMainModuleSectionCount",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Module::GetMainModuleSectionCount(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_module.h/GetMainModuleSectionList": {
  "Fn": "Script::Module::GetMainModuleSectionList",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Module::GetMainModuleSectionList(params[\"list\"].get\u003cListInfo *\u003e()};\n",
  "Params": [
   {
    "Name": "list",
    "Type": "*ListInfo ",
    "CType": "ListInfo *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_module.h/GetMainModuleSize": {
  "Fn": "Script::Module::GetMainModuleSize",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Module::GetMainModuleSize(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_module.h/InfoFromAddr": {
  "Fn": "Script::Module::InfoFromAddr",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Module::InfoFromAddr(params[\"addr\"].get\u003cduint\u003e(), params[\"info\"].get\u003cModuleInfo *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "info",
    "Type": "*ModuleInfo ",
    "CType": "ModuleInfo *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_module.h/InfoFromName": {
  "Fn": "Script::Module::InfoFromName",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Module::InfoFromName(params[\"name\"].get\u003cconst char *\u003e(), params[\"info\"].get\u003cModuleInfo *\u003e()};\n",
  "Params": [
   {
    "Name": "name",
    "Type": "string",
    "CType": "const char *"
   },
   {
    "Name": "info",
    "Type": "*ModuleInfo ",
    "CType": "ModuleInfo *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_module.h/NameFromAddr": {
  "Fn": "Script::Module::NameFromAddr",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Module::NameFromAddr(params[\"addr\"].get\u003cduint\u003e(), params[\"name\"].get\u003cchar *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "name",
    "Type": "*int8 ",
    "CType": "char *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_module.h/PathFromAddr": {
  "Fn": "Script::Module::PathFromAddr",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Module::PathFromAddr(params[\"addr\"].get\u003cduint\u003e(), params[\"path\"].get\u003cchar *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "path",
    "Type": "*int8 ",
    "CType": "char *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_module.h/PathFromName": {
  "Fn": "Script::Module::PathFromName",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Module::PathFromName(params[\"name\"].get\u003cconst char *\u003e(), params[\"path\"].get\u003cchar *\u003e()};\n",
  "Params": [
   {
    "Name": "name",
    "Type": "string",
    "CType": "const char *"
   },
   {
    "Name": "path",
    "Type": "*int8 ",
    "CType": "char *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_module.h/SectionCountFromAddr": {
  "Fn": "Script::Module::SectionCountFromAddr",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Module::SectionCountFromAddr(params[\"addr\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_module.h/SectionCountFromName": {
  "Fn": "Script::Module::SectionCountFromName",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Module::SectionCountFromName(params[\"name\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "name",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_module.h/SectionFromAddr": {
  "Fn": "Script::Module::SectionFromAddr",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Module::SectionFromAddr(params[\"addr\"].get\u003cduint\u003e(), params[\"number\"].get\u003cint\u003e(), params[\"section\"].get\u003cModuleSectionInfo *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "number",
    "Type": "int",
    "CType": "int"
   },
   {
    "Name": "section",
    "Type": "*ModuleSectionInfo ",
    "CType": "ModuleSectionInfo *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_module.h/SectionFromName": {
  "Fn": "Script::Module::SectionFromName",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Module::SectionFromName(params[\"name\"].get\u003cconst char *\u003e(), params[\"number\"].get\u003cint\u003e(), params[\"section\"].get\u003cModuleSectionInfo *\u003e()};\n",
  "Params": [
   {
    "Name": "name",
    "Type": "string",
    "CType": "const char *"
   },
   {
    "Name": "number",
    "Type": "int",
    "CType": "int"
   },
   {
    "Name": "section",
    "Type": "*ModuleSectionInfo ",
    "CType": "ModuleSectionInfo *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_module.h/SectionListFromAddr": {
  "Fn": "Script::Module::SectionListFromAddr",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Module::SectionListFromAddr(params[\"addr\"].get\u003cduint\u003e(), params[\"list\"].get\u003cListInfo *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "list",
    "Type": "*ListInfo ",
    "CType": "ListInfo *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_module.h/SectionListFromName": {
  "Fn": "Script::Module::SectionListFromName",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Module::SectionListFromName(params[\"name\"].get\u003cconst char *\u003e(), params[\"list\"].get\u003cListInfo *\u003e()};\n",
  "Params": [
   {
    "Name": "name",
    "Type": "string",
    "CType": "const char *"
   },
   {
    "Name": "list",
    "Type": "*ListInfo ",
    "CType": "ListInfo *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_module.h/SizeFromAddr": {
  "Fn": "Script::Module::SizeFromAddr",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Module::SizeFromAddr(params[\"addr\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_module.h/SizeFromName": {
  "Fn": "Script::Module::SizeFromName",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Module::SizeFromName(params[\"name\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "name",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_pattern.h/Find": {
  "Fn": "Script::Pattern::Find",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Pattern::Find(params[\"data\"].get\u003cunsigned char *\u003e(), params[\"datasize\"].get\u003cduint\u003e(), params[\"pattern\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "data",
    "Type": "*byte ",
    "CType": "unsigned char *"
   },
   {
    "Name": "datasize",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "pattern",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_pattern.h/FindMem": {
  "Fn": "Script::Pattern::FindMem",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Pattern::FindMem(params[\"start\"].get\u003cduint\u003e(), params[\"size\"].get\u003cduint\u003e(), params[\"pattern\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "start",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "size",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "pattern",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_pattern.h/SearchAndReplace": {
  "Fn": "Script::Pattern::SearchAndReplace",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Pattern::SearchAndReplace(params[\"data\"].get\u003cunsigned char *\u003e(), params[\"datasize\"].get\u003cduint\u003e(), params[\"searchpattern\"].get\u003cconst char *\u003e(), params[\"replacepattern\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "data",
    "Type": "*byte ",
    "CType": "unsigned char *"
   },
   {
    "Name": "datasize",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "searchpattern",
    "Type": "string",
    "CType": "const char *"
   },
   {
    "Name": "replacepattern",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_pattern.h/SearchAndReplaceMem": {
  "Fn": "Script::Pattern::SearchAndReplaceMem",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Pattern::SearchAndReplaceMem(params[\"start\"].get\u003cduint\u003e(), params[\"size\"].get\u003cduint\u003e(), params[\"searchpattern\"].get\u003cconst char *\u003e(), params[\"replacepattern\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "start",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "size",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "searchpattern",
    "Type": "string",
    "CType": "const char *"
   },
   {
    "Name": "replacepattern",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_pattern.h/Write": {
  "Fn": "Script::Pattern::Write",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Pattern::Write(params[\"data\"].get\u003cunsigned char *\u003e(), params[\"datasize\"].get\u003cduint\u003e(), params[\"pattern\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "data",
    "Type": "*byte ",
    "CType": "unsigned char *"
   },
   {
    "Name": "datasize",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "pattern",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_pattern.h/WriteMem": {
  "Fn": "Script::Pattern::WriteMem",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Pattern::WriteMem(params[\"start\"].get\u003cduint\u003e(), params[\"size\"].get\u003cduint\u003e(), params[\"pattern\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "start",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "size",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "pattern",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/Get": {
  "Fn": "Script::Register::Get",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::Get(params[\"reg\"].get\u003cRegisterEnum\u003e()};\n",
  "Params": [
   {
    "Name": "reg",
    "Type": "RegisterEnum",
    "CType": "RegisterEnum"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetAH": {
  "Fn": "Script::Register::GetAH",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetAH(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetAL": {
  "Fn": "Script::Register::GetAL",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetAL(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetAX": {
  "Fn": "Script::Register::GetAX",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetAX(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetBH": {
  "Fn": "Script::Register::GetBH",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetBH(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetBL": {
  "Fn": "Script::Register::GetBL",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetBL(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetBP": {
  "Fn": "Script::Register::GetBP",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetBP(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetBPL": {
  "Fn": "Script::Register::GetBPL",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetBPL(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetBX": {
  "Fn": "Script::Register::GetBX",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetBX(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetCAX": {
  "Fn": "Script::Register::GetCAX",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetCAX(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetCBP": {
  "Fn": "Script::Register::GetCBP",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetCBP(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetCBX": {
  "Fn": "Script::Register::GetCBX",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetCBX(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetCCX": {
  "Fn": "Script::Register::GetCCX",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetCCX(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetCDI": {
  "Fn": "Script::Register::GetCDI",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetCDI(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetCDX": {
  "Fn": "Script::Register::GetCDX",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetCDX(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetCFLAGS": {
  "Fn": "Script::Register::GetCFLAGS",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetCFLAGS(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetCH": {
  "Fn": "Script::Register::GetCH",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetCH(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetCIP": {
  "Fn": "Script::Register::GetCIP",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetCIP(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetCL": {
  "Fn": "Script::Register::GetCL",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetCL(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetCSI": {
  "Fn": "Script::Register::GetCSI",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetCSI(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetCSP": {
  "Fn": "Script::Register::GetCSP",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetCSP(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetCX": {
  "Fn": "Script::Register::GetCX",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetCX(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetDH": {
  "Fn": "Script::Register::GetDH",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetDH(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetDI": {
  "Fn": "Script::Register::GetDI",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetDI(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetDIL": {
  "Fn": "Script::Register::GetDIL",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetDIL(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetDL": {
  "Fn": "Script::Register::GetDL",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetDL(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetDR0": {
  "Fn": "Script::Register::GetDR0",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetDR0(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetDR1": {
  "Fn": "Script::Register::GetDR1",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetDR1(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetDR2": {
  "Fn": "Script::Register::GetDR2",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetDR2(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetDR3": {
  "Fn": "Script::Register::GetDR3",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetDR3(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetDR6": {
  "Fn": "Script::Register::GetDR6",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetDR6(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetDR7": {
  "Fn": "Script::Register::GetDR7",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetDR7(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetDX": {
  "Fn": "Script::Register::GetDX",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetDX(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetEAX": {
  "Fn": "Script::Register::GetEAX",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetEAX(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetEBP": {
  "Fn": "Script::Register::GetEBP",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetEBP(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetEBX": {
  "Fn": "Script::Register::GetEBX",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetEBX(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetECX": {
  "Fn": "Script::Register::GetECX",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetECX(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetEDI": {
  "Fn": "Script::Register::GetEDI",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetEDI(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetEDX": {
  "Fn": "Script::Register::GetEDX",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetEDX(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetEIP": {
  "Fn": "Script::Register::GetEIP",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetEIP(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetESI": {
  "Fn": "Script::Register::GetESI",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetESI(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetESP": {
  "Fn": "Script::Register::GetESP",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetESP(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetR10": {
  "Fn": "Script::Register::GetR10",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetR10(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetR10B": {
  "Fn": "Script::Register::GetR10B",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetR10B(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetR10D": {
  "Fn": "Script::Register::GetR10D",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetR10D(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetR10W": {
  "Fn": "Script::Register::GetR10W",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetR10W(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetR11": {
  "Fn": "Script::Register::GetR11",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetR11(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetR11B": {
  "Fn": "Script::Register::GetR11B",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetR11B(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetR11D": {
  "Fn": "Script::Register::GetR11D",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetR11D(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetR11W": {
  "Fn": "Script::Register::GetR11W",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetR11W(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetR12": {
  "Fn": "Script::Register::GetR12",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetR12(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetR12B": {
  "Fn": "Script::Register::GetR12B",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetR12B(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetR12D": {
  "Fn": "Script::Register::GetR12D",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetR12D(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetR12W": {
  "Fn": "Script::Register::GetR12W",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetR12W(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetR13": {
  "Fn": "Script::Register::GetR13",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetR13(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetR13B": {
  "Fn": "Script::Register::GetR13B",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetR13B(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetR13D": {
  "Fn": "Script::Register::GetR13D",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetR13D(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetR13W": {
  "Fn": "Script::Register::GetR13W",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetR13W(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetR14": {
  "Fn": "Script::Register::GetR14",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetR14(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetR14B": {
  "Fn": "Script::Register::GetR14B",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetR14B(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetR14D": {
  "Fn": "Script::Register::GetR14D",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetR14D(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetR14W": {
  "Fn": "Script::Register::GetR14W",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetR14W(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetR15": {
  "Fn": "Script::Register::GetR15",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetR15(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetR15B": {
  "Fn": "Script::Register::GetR15B",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetR15B(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetR15D": {
  "Fn": "Script::Register::GetR15D",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetR15D(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetR15W": {
  "Fn": "Script::Register::GetR15W",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetR15W(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetR8": {
  "Fn": "Script::Register::GetR8",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetR8(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetR8B": {
  "Fn": "Script::Register::GetR8B",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetR8B(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetR8D": {
  "Fn": "Script::Register::GetR8D",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetR8D(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetR8W": {
  "Fn": "Script::Register::GetR8W",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetR8W(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetR9": {
  "Fn": "Script::Register::GetR9",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetR9(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetR9B": {
  "Fn": "Script::Register::GetR9B",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetR9B(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetR9D": {
  "Fn": "Script::Register::GetR9D",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetR9D(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetR9W": {
  "Fn": "Script::Register::GetR9W",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetR9W(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetRAX": {
  "Fn": "Script::Register::GetRAX",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetRAX(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetRBP": {
  "Fn": "Script::Register::GetRBP",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetRBP(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetRBX": {
  "Fn": "Script::Register::GetRBX",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetRBX(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetRCX": {
  "Fn": "Script::Register::GetRCX",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetRCX(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetRDI": {
  "Fn": "Script::Register::GetRDI",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetRDI(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetRDX": {
  "Fn": "Script::Register::GetRDX",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetRDX(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetRIP": {
  "Fn": "Script::Register::GetRIP",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetRIP(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetRSI": {
  "Fn": "Script::Register::GetRSI",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetRSI(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetRSP": {
  "Fn": "Script::Register::GetRSP",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetRSP(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetSI": {
  "Fn": "Script::Register::GetSI",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetSI(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetSIL": {
  "Fn": "Script::Register::GetSIL",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetSIL(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetSP": {
  "Fn": "Script::Register::GetSP",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetSP(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/GetSPL": {
  "Fn": "Script::Register::GetSPL",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::GetSPL(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_register.h/Set": {
  "Fn": "Script::Register::Set",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::Set(params[\"reg\"].get\u003cRegisterEnum\u003e(), params[\"value\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "reg",
    "Type": "RegisterEnum",
    "CType": "RegisterEnum"
   },
   {
    "Name": "value",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetAH": {
  "Fn": "Script::Register::SetAH",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetAH(params[\"value\"].get\u003cunsigned char\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "byte",
    "CType": "unsigned char"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetAL": {
  "Fn": "Script::Register::SetAL",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetAL(params[\"value\"].get\u003cunsigned char\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "byte",
    "CType": "unsigned char"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetAX": {
  "Fn": "Script::Register::SetAX",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetAX(params[\"value\"].get\u003cunsigned short\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint16",
    "CType": "unsigned short"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetBH": {
  "Fn": "Script::Register::SetBH",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetBH(params[\"value\"].get\u003cunsigned char\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "byte",
    "CType": "unsigned char"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetBL": {
  "Fn": "Script::Register::SetBL",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetBL(params[\"value\"].get\u003cunsigned char\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "byte",
    "CType": "unsigned char"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetBP": {
  "Fn": "Script::Register::SetBP",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetBP(params[\"value\"].get\u003cunsigned short\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint16",
    "CType": "unsigned short"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetBPL": {
  "Fn": "Script::Register::SetBPL",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetBPL(params[\"value\"].get\u003cunsigned char\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "byte",
    "CType": "unsigned char"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetBX": {
  "Fn": "Script::Register::SetBX",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetBX(params[\"value\"].get\u003cunsigned short\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint16",
    "CType": "unsigned short"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetCAX": {
  "Fn": "Script::Register::SetCAX",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetCAX(params[\"value\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetCBP": {
  "Fn": "Script::Register::SetCBP",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetCBP(params[\"value\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetCBX": {
  "Fn": "Script::Register::SetCBX",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetCBX(params[\"value\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetCCX": {
  "Fn": "Script::Register::SetCCX",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetCCX(params[\"value\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetCDI": {
  "Fn": "Script::Register::SetCDI",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetCDI(params[\"value\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetCDX": {
  "Fn": "Script::Register::SetCDX",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetCDX(params[\"value\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetCFLAGS": {
  "Fn": "Script::Register::SetCFLAGS",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetCFLAGS(params[\"value\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetCH": {
  "Fn": "Script::Register::SetCH",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetCH(params[\"value\"].get\u003cunsigned char\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "byte",
    "CType": "unsigned char"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetCIP": {
  "Fn": "Script::Register::SetCIP",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetCIP(params[\"value\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetCL": {
  "Fn": "Script::Register::SetCL",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetCL(params[\"value\"].get\u003cunsigned char\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "byte",
    "CType": "unsigned char"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetCSI": {
  "Fn": "Script::Register::SetCSI",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetCSI(params[\"value\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetCSP": {
  "Fn": "Script::Register::SetCSP",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetCSP(params[\"value\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetCX": {
  "Fn": "Script::Register::SetCX",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetCX(params[\"value\"].get\u003cunsigned short\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint16",
    "CType": "unsigned short"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetDH": {
  "Fn": "Script::Register::SetDH",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetDH(params[\"value\"].get\u003cunsigned char\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "byte",
    "CType": "unsigned char"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetDI": {
  "Fn": "Script::Register::SetDI",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetDI(params[\"value\"].get\u003cunsigned short\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint16",
    "CType": "unsigned short"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetDIL": {
  "Fn": "Script::Register::SetDIL",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetDIL(params[\"value\"].get\u003cunsigned char\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "byte",
    "CType": "unsigned char"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetDL": {
  "Fn": "Script::Register::SetDL",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetDL(params[\"value\"].get\u003cunsigned char\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "byte",
    "CType": "unsigned char"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetDR0": {
  "Fn": "Script::Register::SetDR0",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetDR0(params[\"value\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetDR1": {
  "Fn": "Script::Register::SetDR1",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetDR1(params[\"value\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetDR2": {
  "Fn": "Script::Register::SetDR2",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetDR2(params[\"value\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetDR3": {
  "Fn": "Script::Register::SetDR3",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetDR3(params[\"value\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetDR6": {
  "Fn": "Script::Register::SetDR6",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetDR6(params[\"value\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetDR7": {
  "Fn": "Script::Register::SetDR7",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetDR7(params[\"value\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetDX": {
  "Fn": "Script::Register::SetDX",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetDX(params[\"value\"].get\u003cunsigned short\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint16",
    "CType": "unsigned short"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetEAX": {
  "Fn": "Script::Register::SetEAX",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetEAX(params[\"value\"].get\u003cunsigned int\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint",
    "CType": "unsigned int"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetEBP": {
  "Fn": "Script::Register::SetEBP",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetEBP(params[\"value\"].get\u003cunsigned int\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint",
    "CType": "unsigned int"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetEBX": {
  "Fn": "Script::Register::SetEBX",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetEBX(params[\"value\"].get\u003cunsigned int\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint",
    "CType": "unsigned int"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetECX": {
  "Fn": "Script::Register::SetECX",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetECX(params[\"value\"].get\u003cunsigned int\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint",
    "CType": "unsigned int"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetEDI": {
  "Fn": "Script::Register::SetEDI",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetEDI(params[\"value\"].get\u003cunsigned int\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint",
    "CType": "unsigned int"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetEDX": {
  "Fn": "Script::Register::SetEDX",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetEDX(params[\"value\"].get\u003cunsigned int\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint",
    "CType": "unsigned int"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetEIP": {
  "Fn": "Script::Register::SetEIP",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetEIP(params[\"value\"].get\u003cunsigned int\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint",
    "CType": "unsigned int"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetESI": {
  "Fn": "Script::Register::SetESI",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetESI(params[\"value\"].get\u003cunsigned int\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint",
    "CType": "unsigned int"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetESP": {
  "Fn": "Script::Register::SetESP",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetESP(params[\"value\"].get\u003cunsigned int\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint",
    "CType": "unsigned int"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetR10": {
  "Fn": "Script::Register::SetR10",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetR10(params[\"value\"].get\u003cunsigned long long\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint64",
    "CType": "unsigned long long"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetR10B": {
  "Fn": "Script::Register::SetR10B",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetR10B(params[\"value\"].get\u003cunsigned char\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "byte",
    "CType": "unsigned char"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetR10D": {
  "Fn": "Script::Register::SetR10D",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetR10D(params[\"value\"].get\u003cunsigned int\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint",
    "CType": "unsigned int"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetR10W": {
  "Fn": "Script::Register::SetR10W",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetR10W(params[\"value\"].get\u003cunsigned short\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint16",
    "CType": "unsigned short"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetR11": {
  "Fn": "Script::Register::SetR11",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetR11(params[\"value\"].get\u003cunsigned long long\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint64",
    "CType": "unsigned long long"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetR11B": {
  "Fn": "Script::Register::SetR11B",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetR11B(params[\"value\"].get\u003cunsigned char\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "byte",
    "CType": "unsigned char"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetR11D": {
  "Fn": "Script::Register::SetR11D",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetR11D(params[\"value\"].get\u003cunsigned int\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint",
    "CType": "unsigned int"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetR11W": {
  "Fn": "Script::Register::SetR11W",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetR11W(params[\"value\"].get\u003cunsigned short\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint16",
    "CType": "unsigned short"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetR12": {
  "Fn": "Script::Register::SetR12",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetR12(params[\"value\"].get\u003cunsigned long long\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint64",
    "CType": "unsigned long long"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetR12B": {
  "Fn": "Script::Register::SetR12B",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetR12B(params[\"value\"].get\u003cunsigned char\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "byte",
    "CType": "unsigned char"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetR12D": {
  "Fn": "Script::Register::SetR12D",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetR12D(params[\"value\"].get\u003cunsigned int\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint",
    "CType": "unsigned int"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetR12W": {
  "Fn": "Script::Register::SetR12W",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetR12W(params[\"value\"].get\u003cunsigned short\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint16",
    "CType": "unsigned short"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetR13": {
  "Fn": "Script::Register::SetR13",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetR13(params[\"value\"].get\u003cunsigned long long\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint64",
    "CType": "unsigned long long"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetR13B": {
  "Fn": "Script::Register::SetR13B",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetR13B(params[\"value\"].get\u003cunsigned char\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "byte",
    "CType": "unsigned char"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetR13D": {
  "Fn": "Script::Register::SetR13D",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetR13D(params[\"value\"].get\u003cunsigned int\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint",
    "CType": "unsigned int"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetR13W": {
  "Fn": "Script::Register::SetR13W",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetR13W(params[\"value\"].get\u003cunsigned short\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint16",
    "CType": "unsigned short"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetR14": {
  "Fn": "Script::Register::SetR14",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetR14(params[\"value\"].get\u003cunsigned long long\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint64",
    "CType": "unsigned long long"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetR14B": {
  "Fn": "Script::Register::SetR14B",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetR14B(params[\"value\"].get\u003cunsigned char\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "byte",
    "CType": "unsigned char"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetR14D": {
  "Fn": "Script::Register::SetR14D",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetR14D(params[\"value\"].get\u003cunsigned int\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint",
    "CType": "unsigned int"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetR14W": {
  "Fn": "Script::Register::SetR14W",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetR14W(params[\"value\"].get\u003cunsigned short\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint16",
    "CType": "unsigned short"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetR15": {
  "Fn": "Script::Register::SetR15",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetR15(params[\"value\"].get\u003cunsigned long long\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint64",
    "CType": "unsigned long long"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetR15B": {
  "Fn": "Script::Register::SetR15B",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetR15B(params[\"value\"].get\u003cunsigned char\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "byte",
    "CType": "unsigned char"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetR15D": {
  "Fn": "Script::Register::SetR15D",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetR15D(params[\"value\"].get\u003cunsigned int\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint",
    "CType": "unsigned int"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetR15W": {
  "Fn": "Script::Register::SetR15W",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetR15W(params[\"value\"].get\u003cunsigned short\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint16",
    "CType": "unsigned short"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetR8": {
  "Fn": "Script::Register::SetR8",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetR8(params[\"value\"].get\u003cunsigned long long\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint64",
    "CType": "unsigned long long"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetR8B": {
  "Fn": "Script::Register::SetR8B",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetR8B(params[\"value\"].get\u003cunsigned char\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "byte",
    "CType": "unsigned char"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetR8D": {
  "Fn": "Script::Register::SetR8D",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetR8D(params[\"value\"].get\u003cunsigned int\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint",
    "CType": "unsigned int"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetR8W": {
  "Fn": "Script::Register::SetR8W",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetR8W(params[\"value\"].get\u003cunsigned short\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint16",
    "CType": "unsigned short"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetR9": {
  "Fn": "Script::Register::SetR9",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetR9(params[\"value\"].get\u003cunsigned long long\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint64",
    "CType": "unsigned long long"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetR9B": {
  "Fn": "Script::Register::SetR9B",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetR9B(params[\"value\"].get\u003cunsigned char\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "byte",
    "CType": "unsigned char"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetR9D": {
  "Fn": "Script::Register::SetR9D",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetR9D(params[\"value\"].get\u003cunsigned int\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint",
    "CType": "unsigned int"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetR9W": {
  "Fn": "Script::Register::SetR9W",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetR9W(params[\"value\"].get\u003cunsigned short\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint16",
    "CType": "unsigned short"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetRAX": {
  "Fn": "Script::Register::SetRAX",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetRAX(params[\"value\"].get\u003cunsigned long long\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint64",
    "CType": "unsigned long long"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetRBP": {
  "Fn": "Script::Register::SetRBP",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetRBP(params[\"value\"].get\u003cunsigned long long\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint64",
    "CType": "unsigned long long"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetRBX": {
  "Fn": "Script::Register::SetRBX",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetRBX(params[\"value\"].get\u003cunsigned long long\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint64",
    "CType": "unsigned long long"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetRCX": {
  "Fn": "Script::Register::SetRCX",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetRCX(params[\"value\"].get\u003cunsigned long long\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint64",
    "CType": "unsigned long long"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetRDI": {
  "Fn": "Script::Register::SetRDI",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetRDI(params[\"value\"].get\u003cunsigned long long\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint64",
    "CType": "unsigned long long"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetRDX": {
  "Fn": "Script::Register::SetRDX",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetRDX(params[\"value\"].get\u003cunsigned long long\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint64",
    "CType": "unsigned long long"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetRIP": {
  "Fn": "Script::Register::SetRIP",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetRIP(params[\"value\"].get\u003cunsigned long long\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint64",
    "CType": "unsigned long long"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetRSI": {
  "Fn": "Script::Register::SetRSI",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetRSI(params[\"value\"].get\u003cunsigned long long\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint64",
    "CType": "unsigned long long"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetRSP": {
  "Fn": "Script::Register::SetRSP",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetRSP(params[\"value\"].get\u003cunsigned long long\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint64",
    "CType": "unsigned long long"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetSI": {
  "Fn": "Script::Register::SetSI",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetSI(params[\"value\"].get\u003cunsigned short\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint16",
    "CType": "unsigned short"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetSIL": {
  "Fn": "Script::Register::SetSIL",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetSIL(params[\"value\"].get\u003cunsigned char\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "byte",
    "CType": "unsigned char"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetSP": {
  "Fn": "Script::Register::SetSP",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetSP(params[\"value\"].get\u003cunsigned short\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint16",
    "CType": "unsigned short"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/SetSPL": {
  "Fn": "Script::Register::SetSPL",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::SetSPL(params[\"value\"].get\u003cunsigned char\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "byte",
    "CType": "unsigned char"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_register.h/Size": {
  "Fn": "Script::Register::Size",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Register::Size(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_stack.h/Peek": {
  "Fn": "Script::Stack::Peek",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Stack::Peek(params[\"offset\"].get\u003cint\u003e()};\n",
  "Params": [
   {
    "Name": "offset",
    "Type": "int",
    "CType": "int"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_stack.h/Pop": {
  "Fn": "Script::Stack::Pop",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Stack::Pop(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/_scriptapi_stack.h/Push": {
  "Fn": "Script::Stack::Push",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Stack::Push(params[\"value\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "value",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/_scriptapi_symbol.h/GetList": {
  "Fn": "Script::Symbol::GetList",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = Script::Symbol::GetList(params[\"list\"].get\u003cListInfo *\u003e()};\n",
  "Params": [
   {
    "Name": "list",
    "Type": "*ListInfo ",
    "CType": "ListInfo *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgegraph.h/AddNode": {
  "Fn": "::BridgeCFGraph::AddNode",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = ::BridgeCFGraph::AddNode(params[\"node\"].get\u003cconst BridgeCFNode \u0026\u003e()};\n",
  "Params": [
   {
    "Name": "node",
    "Type": "*BridgeCFNode ",
    "CType": "const BridgeCFNode \u0026"
   }
  ],
  "ReturnType": ""
 },
 "/bridgegraph.h/AddParent": {
  "Fn": "::BridgeCFGraph::AddParent",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = ::BridgeCFGraph::AddParent(params[\"child\"].get\u003cint\u003e(), params[\"parent\"].get\u003cint\u003e()};\n",
  "Params": [
   {
    "Name": "child",
    "Type": "int",
    "CType": "int"
   },
   {
    "Name": "parent",
    "Type": "int",
    "CType": "int"
   }
  ],
  "ReturnType": ""
 },
 "/bridgegraph.h/Free": {
  "Fn": "::BridgeCFGraph::Free",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = ::BridgeCFGraph::Free(params[\"graphList\"].get\u003cconst BridgeCFGraphList *\u003e()};\n",
  "Params": [
   {
    "Name": "graphList",
    "Type": "*uintptr ",
    "CType": "const BridgeCFGraphList *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgegraph.h/ToGraphList": {
  "Fn": "::BridgeCFGraph::ToGraphList",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = ::BridgeCFGraph::ToGraphList(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgegraph.h/ToNodeList": {
  "Fn": "::BridgeCFNode::ToNodeList",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = ::BridgeCFNode::ToNodeList(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgegraph.h/__debugbreak": {
  "Fn": "__debugbreak",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = __debugbreak(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/BridgeAlloc": {
  "Fn": "BridgeAlloc",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = BridgeAlloc(params[\"size\"].get\u003csize_t\u003e()};\n",
  "Params": [
   {
    "Name": "size",
    "Type": "uint",
    "CType": "size_t"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/BridgeFree": {
  "Fn": "BridgeFree",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = BridgeFree(params[\"ptr\"].get\u003cvoid *\u003e()};\n",
  "Params": [
   {
    "Name": "ptr",
    "Type": "*uintptr ",
    "CType": "void *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/BridgeGetDbgVersion": {
  "Fn": "BridgeGetDbgVersion",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = BridgeGetDbgVersion(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/BridgeGetNtBuildNumber": {
  "Fn": "BridgeGetNtBuildNumber",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = BridgeGetNtBuildNumber(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/BridgeInit": {
  "Fn": "BridgeInit",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = BridgeInit(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/BridgeIsARM64Emulated": {
  "Fn": "BridgeIsARM64Emulated",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = BridgeIsARM64Emulated(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/BridgeIsProcessElevated": {
  "Fn": "BridgeIsProcessElevated",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = BridgeIsProcessElevated(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/BridgeSettingFlush": {
  "Fn": "BridgeSettingFlush",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = BridgeSettingFlush(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/BridgeSettingGet": {
  "Fn": "BridgeSettingGet",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = BridgeSettingGet(params[\"section\"].get\u003cconst char *\u003e(), params[\"key\"].get\u003cconst char *\u003e(), params[\"value\"].get\u003cchar *\u003e()};\n",
  "Params": [
   {
    "Name": "section",
    "Type": "string",
    "CType": "const char *"
   },
   {
    "Name": "key",
    "Type": "string",
    "CType": "const char *"
   },
   {
    "Name": "value",
    "Type": "*int8 ",
    "CType": "char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/BridgeSettingGetUint": {
  "Fn": "BridgeSettingGetUint",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = BridgeSettingGetUint(params[\"section\"].get\u003cconst char *\u003e(), params[\"key\"].get\u003cconst char *\u003e(), params[\"value\"].get\u003cduint *\u003e()};\n",
  "Params": [
   {
    "Name": "section",
    "Type": "string",
    "CType": "const char *"
   },
   {
    "Name": "key",
    "Type": "string",
    "CType": "const char *"
   },
   {
    "Name": "value",
    "Type": "*uint ",
    "CType": "duint *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/BridgeSettingRead": {
  "Fn": "BridgeSettingRead",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = BridgeSettingRead(params[\"errorLine\"].get\u003cint *\u003e()};\n",
  "Params": [
   {
    "Name": "errorLine",
    "Type": "*int ",
    "CType": "int *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/BridgeSettingSet": {
  "Fn": "BridgeSettingSet",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = BridgeSettingSet(params[\"section\"].get\u003cconst char *\u003e(), params[\"key\"].get\u003cconst char *\u003e(), params[\"value\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "section",
    "Type": "string",
    "CType": "const char *"
   },
   {
    "Name": "key",
    "Type": "string",
    "CType": "const char *"
   },
   {
    "Name": "value",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/BridgeSettingSetUint": {
  "Fn": "BridgeSettingSetUint",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = BridgeSettingSetUint(params[\"section\"].get\u003cconst char *\u003e(), params[\"key\"].get\u003cconst char *\u003e(), params[\"value\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "section",
    "Type": "string",
    "CType": "const char *"
   },
   {
    "Name": "key",
    "Type": "string",
    "CType": "const char *"
   },
   {
    "Name": "value",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/BridgeStart": {
  "Fn": "BridgeStart",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = BridgeStart(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/BridgeUserDirectory": {
  "Fn": "BridgeUserDirectory",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = BridgeUserDirectory(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/DbgAnalyzeFunction": {
  "Fn": "DbgAnalyzeFunction",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgAnalyzeFunction(params[\"entry\"].get\u003cduint\u003e(), params[\"graph\"].get\u003cBridgeCFGraphList *\u003e()};\n",
  "Params": [
   {
    "Name": "entry",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "graph",
    "Type": "*uintptr ",
    "CType": "BridgeCFGraphList *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgArgumentAdd": {
  "Fn": "DbgArgumentAdd",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgArgumentAdd(params[\"start\"].get\u003cduint\u003e(), params[\"end\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "start",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "end",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgArgumentDel": {
  "Fn": "DbgArgumentDel",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgArgumentDel(params[\"addr\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgArgumentGet": {
  "Fn": "DbgArgumentGet",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgArgumentGet(params[\"addr\"].get\u003cduint\u003e(), params[\"start\"].get\u003cduint *\u003e(), params[\"end\"].get\u003cduint *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "start",
    "Type": "*uint ",
    "CType": "duint *"
   },
   {
    "Name": "end",
    "Type": "*uint ",
    "CType": "duint *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgArgumentOverlaps": {
  "Fn": "DbgArgumentOverlaps",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgArgumentOverlaps(params[\"start\"].get\u003cduint\u003e(), params[\"end\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "start",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "end",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgAssembleAt": {
  "Fn": "DbgAssembleAt",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgAssembleAt(params[\"addr\"].get\u003cduint\u003e(), params[\"instruction\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "instruction",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgClearAutoBookmarkRange": {
  "Fn": "DbgClearAutoBookmarkRange",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgClearAutoBookmarkRange(params[\"start\"].get\u003cduint\u003e(), params[\"end\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "start",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "end",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgClearAutoCommentRange": {
  "Fn": "DbgClearAutoCommentRange",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgClearAutoCommentRange(params[\"start\"].get\u003cduint\u003e(), params[\"end\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "start",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "end",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgClearAutoFunctionRange": {
  "Fn": "DbgClearAutoFunctionRange",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgClearAutoFunctionRange(params[\"start\"].get\u003cduint\u003e(), params[\"end\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "start",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "end",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgClearAutoLabelRange": {
  "Fn": "DbgClearAutoLabelRange",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgClearAutoLabelRange(params[\"start\"].get\u003cduint\u003e(), params[\"end\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "start",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "end",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgClearBookmarkRange": {
  "Fn": "DbgClearBookmarkRange",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgClearBookmarkRange(params[\"start\"].get\u003cduint\u003e(), params[\"end\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "start",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "end",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgClearCommentRange": {
  "Fn": "DbgClearCommentRange",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgClearCommentRange(params[\"start\"].get\u003cduint\u003e(), params[\"end\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "start",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "end",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgClearLabelRange": {
  "Fn": "DbgClearLabelRange",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgClearLabelRange(params[\"start\"].get\u003cduint\u003e(), params[\"end\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "start",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "end",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgCmdExec": {
  "Fn": "DbgCmdExec",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgCmdExec(params[\"cmd\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "cmd",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgCmdExecDirect": {
  "Fn": "DbgCmdExecDirect",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgCmdExecDirect(params[\"cmd\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "cmd",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgDelEncodeTypeRange": {
  "Fn": "DbgDelEncodeTypeRange",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgDelEncodeTypeRange(params[\"start\"].get\u003cduint\u003e(), params[\"end\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "start",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "end",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgDelEncodeTypeSegment": {
  "Fn": "DbgDelEncodeTypeSegment",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgDelEncodeTypeSegment(params[\"start\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "start",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgDisasmAt": {
  "Fn": "DbgDisasmAt",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgDisasmAt(params[\"addr\"].get\u003cduint\u003e(), params[\"instr\"].get\u003cDISASM_INSTR *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "instr",
    "Type": "*DISASM_INSTR ",
    "CType": "DISASM_INSTR *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgDisasmFastAt": {
  "Fn": "DbgDisasmFastAt",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgDisasmFastAt(params[\"addr\"].get\u003cduint\u003e(), params[\"basicinfo\"].get\u003cBASIC_INSTRUCTION_INFO *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "basicinfo",
    "Type": "*uintptr ",
    "CType": "BASIC_INSTRUCTION_INFO *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgExit": {
  "Fn": "DbgExit",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgExit(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/DbgFunctionAdd": {
  "Fn": "DbgFunctionAdd",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgFunctionAdd(params[\"start\"].get\u003cduint\u003e(), params[\"end\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "start",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "end",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgFunctionDel": {
  "Fn": "DbgFunctionDel",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgFunctionDel(params[\"addr\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgFunctionGet": {
  "Fn": "DbgFunctionGet",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgFunctionGet(params[\"addr\"].get\u003cduint\u003e(), params[\"start\"].get\u003cduint *\u003e(), params[\"end\"].get\u003cduint *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "start",
    "Type": "*uint ",
    "CType": "duint *"
   },
   {
    "Name": "end",
    "Type": "*uint ",
    "CType": "duint *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgFunctionOverlaps": {
  "Fn": "DbgFunctionOverlaps",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgFunctionOverlaps(params[\"start\"].get\u003cduint\u003e(), params[\"end\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "start",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "end",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgFunctions": {
  "Fn": "DbgFunctions",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgFunctions(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/DbgGetArgTypeAt": {
  "Fn": "DbgGetArgTypeAt",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgGetArgTypeAt(params[\"addr\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgGetBookmarkAt": {
  "Fn": "DbgGetBookmarkAt",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgGetBookmarkAt(params[\"addr\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgGetBpList": {
  "Fn": "DbgGetBpList",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgGetBpList(params[\"Type\"].get\u003cBPXTYPE\u003e(), params[\"list\"].get\u003cBPMAP *\u003e()};\n",
  "Params": [
   {
    "Name": "Type",
    "Type": "BPXTYPE",
    "CType": "BPXTYPE"
   },
   {
    "Name": "list",
    "Type": "*BPMAP ",
    "CType": "BPMAP *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgGetBpxTypeAt": {
  "Fn": "DbgGetBpxTypeAt",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgGetBpxTypeAt(params[\"addr\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgGetBranchDestination": {
  "Fn": "DbgGetBranchDestination",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgGetBranchDestination(params[\"addr\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgGetCommentAt": {
  "Fn": "DbgGetCommentAt",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgGetCommentAt(params[\"addr\"].get\u003cduint\u003e(), params[\"text\"].get\u003cchar *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "text",
    "Type": "*int8 ",
    "CType": "char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgGetDebugEngine": {
  "Fn": "DbgGetDebugEngine",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgGetDebugEngine(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/DbgGetEncodeSizeAt": {
  "Fn": "DbgGetEncodeSizeAt",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgGetEncodeSizeAt(params[\"addr\"].get\u003cduint\u003e(), params[\"codesize\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "codesize",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgGetEncodeTypeAt": {
  "Fn": "DbgGetEncodeTypeAt",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgGetEncodeTypeAt(params[\"addr\"].get\u003cduint\u003e(), params[\"size\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "size",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgGetEncodeTypeBuffer": {
  "Fn": "DbgGetEncodeTypeBuffer",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgGetEncodeTypeBuffer(params[\"addr\"].get\u003cduint\u003e(), params[\"size\"].get\u003cduint *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "size",
    "Type": "*uint ",
    "CType": "duint *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgGetFunctionTypeAt": {
  "Fn": "DbgGetFunctionTypeAt",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgGetFunctionTypeAt(params[\"addr\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgGetLabelAt": {
  "Fn": "DbgGetLabelAt",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgGetLabelAt(params[\"addr\"].get\u003cduint\u003e(), params[\"segment\"].get\u003cSEGMENTREG\u003e(), params[\"text\"].get\u003cchar *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "segment",
    "Type": "SEGMENTREG",
    "CType": "SEGMENTREG"
   },
   {
    "Name": "text",
    "Type": "*int8 ",
    "CType": "char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgGetLoopTypeAt": {
  "Fn": "DbgGetLoopTypeAt",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgGetLoopTypeAt(params[\"addr\"].get\u003cduint\u003e(), params[\"depth\"].get\u003cint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "depth",
    "Type": "int",
    "CType": "int"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgGetModuleAt": {
  "Fn": "DbgGetModuleAt",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgGetModuleAt(params[\"addr\"].get\u003cduint\u003e(), params[\"text\"].get\u003cchar *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "text",
    "Type": "*int8 ",
    "CType": "char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgGetPebAddress": {
  "Fn": "DbgGetPebAddress",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgGetPebAddress(params[\"ProcessId\"].get\u003cDWORD\u003e()};\n",
  "Params": [
   {
    "Name": "ProcessId",
    "Type": "uint32",
    "CType": "DWORD"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgGetProcessHandle": {
  "Fn": "DbgGetProcessHandle",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgGetProcessHandle(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/DbgGetProcessId": {
  "Fn": "DbgGetProcessId",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgGetProcessId(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/DbgGetRegDumpEx": {
  "Fn": "DbgGetRegDumpEx",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgGetRegDumpEx(params[\"regdump\"].get\u003cREGDUMP *\u003e(), params[\"size\"].get\u003csize_t\u003e()};\n",
  "Params": [
   {
    "Name": "regdump",
    "Type": "*REGDUMP ",
    "CType": "REGDUMP *"
   },
   {
    "Name": "size",
    "Type": "uint",
    "CType": "size_t"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgGetStringAt": {
  "Fn": "DbgGetStringAt",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgGetStringAt(params[\"addr\"].get\u003cduint\u003e(), params[\"text\"].get\u003cchar *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "text",
    "Type": "*int8 ",
    "CType": "char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgGetSymbolInfo": {
  "Fn": "DbgGetSymbolInfo",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgGetSymbolInfo(params[\"symbolptr\"].get\u003cconst SYMBOLPTR *\u003e(), params[\"info\"].get\u003cSYMBOLINFO *\u003e()};\n",
  "Params": [
   {
    "Name": "symbolptr",
    "Type": "*uintptr ",
    "CType": "const SYMBOLPTR *"
   },
   {
    "Name": "info",
    "Type": "*uintptr ",
    "CType": "SYMBOLINFO *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgGetSymbolInfoAt": {
  "Fn": "DbgGetSymbolInfoAt",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgGetSymbolInfoAt(params[\"addr\"].get\u003cduint\u003e(), params[\"info\"].get\u003cSYMBOLINFO *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "info",
    "Type": "*uintptr ",
    "CType": "SYMBOLINFO *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgGetTebAddress": {
  "Fn": "DbgGetTebAddress",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgGetTebAddress(params[\"ThreadId\"].get\u003cDWORD\u003e()};\n",
  "Params": [
   {
    "Name": "ThreadId",
    "Type": "uint32",
    "CType": "DWORD"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgGetThreadHandle": {
  "Fn": "DbgGetThreadHandle",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgGetThreadHandle(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/DbgGetThreadId": {
  "Fn": "DbgGetThreadId",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgGetThreadId(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/DbgGetThreadList": {
  "Fn": "DbgGetThreadList",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgGetThreadList(params[\"list\"].get\u003cTHREADLIST *\u003e()};\n",
  "Params": [
   {
    "Name": "list",
    "Type": "*THREADLIST ",
    "CType": "THREADLIST *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgGetTimeWastedCounter": {
  "Fn": "DbgGetTimeWastedCounter",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgGetTimeWastedCounter(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/DbgGetWatchList": {
  "Fn": "DbgGetWatchList",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgGetWatchList(params[\"list\"].get\u003cListInfo *\u003e()};\n",
  "Params": [
   {
    "Name": "list",
    "Type": "*ListInfo ",
    "CType": "ListInfo *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgGetXrefCountAt": {
  "Fn": "DbgGetXrefCountAt",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgGetXrefCountAt(params[\"addr\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgGetXrefTypeAt": {
  "Fn": "DbgGetXrefTypeAt",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgGetXrefTypeAt(params[\"addr\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgInit": {
  "Fn": "DbgInit",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgInit(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/DbgIsBpDisabled": {
  "Fn": "DbgIsBpDisabled",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgIsBpDisabled(params[\"addr\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgIsDebugging": {
  "Fn": "DbgIsDebugging",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgIsDebugging(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/DbgIsJumpGoingToExecute": {
  "Fn": "DbgIsJumpGoingToExecute",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgIsJumpGoingToExecute(params[\"addr\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgIsRunLocked": {
  "Fn": "DbgIsRunLocked",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgIsRunLocked(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/DbgIsRunning": {
  "Fn": "DbgIsRunning",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgIsRunning(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/DbgIsValidExpression": {
  "Fn": "DbgIsValidExpression",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgIsValidExpression(params[\"expression\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "expression",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgLoopAdd": {
  "Fn": "DbgLoopAdd",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgLoopAdd(params[\"start\"].get\u003cduint\u003e(), params[\"end\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "start",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "end",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgLoopDel": {
  "Fn": "DbgLoopDel",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgLoopDel(params[\"depth\"].get\u003cint\u003e(), params[\"addr\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "depth",
    "Type": "int",
    "CType": "int"
   },
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgLoopGet": {
  "Fn": "DbgLoopGet",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgLoopGet(params[\"depth\"].get\u003cint\u003e(), params[\"addr\"].get\u003cduint\u003e(), params[\"start\"].get\u003cduint *\u003e(), params[\"end\"].get\u003cduint *\u003e()};\n",
  "Params": [
   {
    "Name": "depth",
    "Type": "int",
    "CType": "int"
   },
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "start",
    "Type": "*uint ",
    "CType": "duint *"
   },
   {
    "Name": "end",
    "Type": "*uint ",
    "CType": "duint *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgLoopOverlaps": {
  "Fn": "DbgLoopOverlaps",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgLoopOverlaps(params[\"depth\"].get\u003cint\u003e(), params[\"start\"].get\u003cduint\u003e(), params[\"end\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "depth",
    "Type": "int",
    "CType": "int"
   },
   {
    "Name": "start",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "end",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgMemFindBaseAddr": {
  "Fn": "DbgMemFindBaseAddr",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgMemFindBaseAddr(params[\"addr\"].get\u003cduint\u003e(), params[\"size\"].get\u003cduint *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "size",
    "Type": "*uint ",
    "CType": "duint *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgMemGetPageSize": {
  "Fn": "DbgMemGetPageSize",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgMemGetPageSize(params[\"base\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "base",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgMemIsValidReadPtr": {
  "Fn": "DbgMemIsValidReadPtr",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgMemIsValidReadPtr(params[\"addr\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgMemMap": {
  "Fn": "DbgMemMap",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgMemMap(params[\"memmap\"].get\u003cMEMMAP *\u003e()};\n",
  "Params": [
   {
    "Name": "memmap",
    "Type": "*MEMMAP ",
    "CType": "MEMMAP *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgMemRead": {
  "Fn": "DbgMemRead",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgMemRead(params[\"va\"].get\u003cduint\u003e(), params[\"dest\"].get\u003cvoid *\u003e(), params[\"size\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "va",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "dest",
    "Type": "*uintptr ",
    "CType": "void *"
   },
   {
    "Name": "size",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgMemWrite": {
  "Fn": "DbgMemWrite",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgMemWrite(params[\"va\"].get\u003cduint\u003e(), params[\"src\"].get\u003cconst void *\u003e(), params[\"size\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "va",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "src",
    "Type": "*uintptr ",
    "CType": "const void *"
   },
   {
    "Name": "size",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgMenuEntryClicked": {
  "Fn": "DbgMenuEntryClicked",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgMenuEntryClicked(params[\"hEntry\"].get\u003cint\u003e()};\n",
  "Params": [
   {
    "Name": "hEntry",
    "Type": "int",
    "CType": "int"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgMenuPrepare": {
  "Fn": "DbgMenuPrepare",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgMenuPrepare(params[\"hMenu\"].get\u003cGUIMENUTYPE\u003e()};\n",
  "Params": [
   {
    "Name": "hMenu",
    "Type": "GUIMENUTYPE",
    "CType": "GUIMENUTYPE"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgModBaseFromName": {
  "Fn": "DbgModBaseFromName",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgModBaseFromName(params[\"name\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "name",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgReleaseEncodeTypeBuffer": {
  "Fn": "DbgReleaseEncodeTypeBuffer",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgReleaseEncodeTypeBuffer(params[\"buffer\"].get\u003cvoid *\u003e()};\n",
  "Params": [
   {
    "Name": "buffer",
    "Type": "*uintptr ",
    "CType": "void *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgScriptAbort": {
  "Fn": "DbgScriptAbort",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgScriptAbort(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/DbgScriptBpGet": {
  "Fn": "DbgScriptBpGet",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgScriptBpGet(params[\"line\"].get\u003cint\u003e()};\n",
  "Params": [
   {
    "Name": "line",
    "Type": "int",
    "CType": "int"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgScriptBpToggle": {
  "Fn": "DbgScriptBpToggle",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgScriptBpToggle(params[\"line\"].get\u003cint\u003e()};\n",
  "Params": [
   {
    "Name": "line",
    "Type": "int",
    "CType": "int"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgScriptCmdExec": {
  "Fn": "DbgScriptCmdExec",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgScriptCmdExec(params[\"command\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "command",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgScriptGetBranchInfo": {
  "Fn": "DbgScriptGetBranchInfo",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgScriptGetBranchInfo(params[\"line\"].get\u003cint\u003e(), params[\"info\"].get\u003cSCRIPTBRANCH *\u003e()};\n",
  "Params": [
   {
    "Name": "line",
    "Type": "int",
    "CType": "int"
   },
   {
    "Name": "info",
    "Type": "*SCRIPTBRANCH ",
    "CType": "SCRIPTBRANCH *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgScriptGetLineType": {
  "Fn": "DbgScriptGetLineType",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgScriptGetLineType(params[\"line\"].get\u003cint\u003e()};\n",
  "Params": [
   {
    "Name": "line",
    "Type": "int",
    "CType": "int"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgScriptLoad": {
  "Fn": "DbgScriptLoad",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgScriptLoad(params[\"filename\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "filename",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgScriptRun": {
  "Fn": "DbgScriptRun",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgScriptRun(params[\"destline\"].get\u003cint\u003e()};\n",
  "Params": [
   {
    "Name": "destline",
    "Type": "int",
    "CType": "int"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgScriptSetIp": {
  "Fn": "DbgScriptSetIp",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgScriptSetIp(params[\"line\"].get\u003cint\u003e()};\n",
  "Params": [
   {
    "Name": "line",
    "Type": "int",
    "CType": "int"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgScriptStep": {
  "Fn": "DbgScriptStep",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgScriptStep(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/DbgScriptUnload": {
  "Fn": "DbgScriptUnload",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgScriptUnload(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/DbgSelChanged": {
  "Fn": "DbgSelChanged",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgSelChanged(params[\"hWindow\"].get\u003cint\u003e(), params[\"VA\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "hWindow",
    "Type": "int",
    "CType": "int"
   },
   {
    "Name": "VA",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgSetAutoBookmarkAt": {
  "Fn": "DbgSetAutoBookmarkAt",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgSetAutoBookmarkAt(params[\"addr\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgSetAutoCommentAt": {
  "Fn": "DbgSetAutoCommentAt",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgSetAutoCommentAt(params[\"addr\"].get\u003cduint\u003e(), params[\"text\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "text",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgSetAutoFunctionAt": {
  "Fn": "DbgSetAutoFunctionAt",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgSetAutoFunctionAt(params[\"start\"].get\u003cduint\u003e(), params[\"end\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "start",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "end",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgSetAutoLabelAt": {
  "Fn": "DbgSetAutoLabelAt",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgSetAutoLabelAt(params[\"addr\"].get\u003cduint\u003e(), params[\"text\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "text",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgSetCommentAt": {
  "Fn": "DbgSetCommentAt",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgSetCommentAt(params[\"addr\"].get\u003cduint\u003e(), params[\"text\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "text",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgSetEncodeType": {
  "Fn": "DbgSetEncodeType",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgSetEncodeType(params[\"addr\"].get\u003cduint\u003e(), params[\"size\"].get\u003cduint\u003e(), params[\"Type\"].get\u003cENCODETYPE\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "size",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "Type",
    "Type": "ENCODETYPE",
    "CType": "ENCODETYPE"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgSetLabelAt": {
  "Fn": "DbgSetLabelAt",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgSetLabelAt(params[\"addr\"].get\u003cduint\u003e(), params[\"text\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "text",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgSettingsUpdated": {
  "Fn": "DbgSettingsUpdated",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgSettingsUpdated(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/DbgStackCommentGet": {
  "Fn": "DbgStackCommentGet",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgStackCommentGet(params[\"addr\"].get\u003cduint\u003e(), params[\"comment\"].get\u003cSTACK_COMMENT *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "comment",
    "Type": "*STACK_COMMENT ",
    "CType": "STACK_COMMENT *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgSymbolEnum": {
  "Fn": "DbgSymbolEnum",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgSymbolEnum(params[\"base\"].get\u003cduint\u003e(), params[\"cbSymbolEnum\"].get\u003cCBSYMBOLENUM\u003e(), params[\"user\"].get\u003cvoid *\u003e()};\n",
  "Params": [
   {
    "Name": "base",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "cbSymbolEnum",
    "Type": "uintptr",
    "CType": "CBSYMBOLENUM"
   },
   {
    "Name": "user",
    "Type": "*uintptr ",
    "CType": "void *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgSymbolEnumFromCache": {
  "Fn": "DbgSymbolEnumFromCache",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgSymbolEnumFromCache(params[\"base\"].get\u003cduint\u003e(), params[\"cbSymbolEnum\"].get\u003cCBSYMBOLENUM\u003e(), params[\"user\"].get\u003cvoid *\u003e()};\n",
  "Params": [
   {
    "Name": "base",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "cbSymbolEnum",
    "Type": "uintptr",
    "CType": "CBSYMBOLENUM"
   },
   {
    "Name": "user",
    "Type": "*uintptr ",
    "CType": "void *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgSymbolEnumRange": {
  "Fn": "DbgSymbolEnumRange",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgSymbolEnumRange(params[\"start\"].get\u003cduint\u003e(), params[\"end\"].get\u003cduint\u003e(), params[\"symbolMask\"].get\u003cunsigned int\u003e(), params[\"cbSymbolEnum\"].get\u003cCBSYMBOLENUM\u003e(), params[\"user\"].get\u003cvoid *\u003e()};\n",
  "Params": [
   {
    "Name": "start",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "end",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "symbolMask",
    "Type": "uint",
    "CType": "unsigned int"
   },
   {
    "Name": "cbSymbolEnum",
    "Type": "uintptr",
    "CType": "CBSYMBOLENUM"
   },
   {
    "Name": "user",
    "Type": "*uintptr ",
    "CType": "void *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgValFromString": {
  "Fn": "DbgValFromString",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgValFromString(params[\"s\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "s",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgValToString": {
  "Fn": "DbgValToString",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgValToString(params[\"s\"].get\u003cconst char *\u003e(), params[\"value\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "s",
    "Type": "string",
    "CType": "const char *"
   },
   {
    "Name": "value",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgWinEvent": {
  "Fn": "DbgWinEvent",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgWinEvent(params[\"message\"].get\u003cMSG *\u003e(), params[\"result\"].get\u003clong *\u003e()};\n",
  "Params": [
   {
    "Name": "message",
    "Type": "*uintptr ",
    "CType": "MSG *"
   },
   {
    "Name": "result",
    "Type": "*int32 ",
    "CType": "long *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgWinEventGlobal": {
  "Fn": "DbgWinEventGlobal",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgWinEventGlobal(params[\"message\"].get\u003cMSG *\u003e()};\n",
  "Params": [
   {
    "Name": "message",
    "Type": "*uintptr ",
    "CType": "MSG *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgXrefAdd": {
  "Fn": "DbgXrefAdd",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgXrefAdd(params[\"addr\"].get\u003cduint\u003e(), params[\"from\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "from",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgXrefAddMulti": {
  "Fn": "DbgXrefAddMulti",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgXrefAddMulti(params[\"edges\"].get\u003cconst XREF_EDGE *\u003e(), params[\"count\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "edges",
    "Type": "*XREF_EDGE ",
    "CType": "const XREF_EDGE *"
   },
   {
    "Name": "count",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgXrefDelAll": {
  "Fn": "DbgXrefDelAll",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgXrefDelAll(params[\"addr\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/DbgXrefGet": {
  "Fn": "DbgXrefGet",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = DbgXrefGet(params[\"addr\"].get\u003cduint\u003e(), params[\"info\"].get\u003cXREF_INFO *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "info",
    "Type": "*XREF_INFO ",
    "CType": "XREF_INFO *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiAddFavouriteCommand": {
  "Fn": "GuiAddFavouriteCommand",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiAddFavouriteCommand(params[\"name\"].get\u003cconst char *\u003e(), params[\"shortcut\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "name",
    "Type": "string",
    "CType": "const char *"
   },
   {
    "Name": "shortcut",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiAddFavouriteTool": {
  "Fn": "GuiAddFavouriteTool",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiAddFavouriteTool(params[\"name\"].get\u003cconst char *\u003e(), params[\"description\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "name",
    "Type": "string",
    "CType": "const char *"
   },
   {
    "Name": "description",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiAddInfoLine": {
  "Fn": "GuiAddInfoLine",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiAddInfoLine(params[\"infoLine\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "infoLine",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiAddLogMessage": {
  "Fn": "GuiAddLogMessage",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiAddLogMessage(params[\"msg\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "msg",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiAddLogMessageHtml": {
  "Fn": "GuiAddLogMessageHtml",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiAddLogMessageHtml(params[\"msg\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "msg",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiAddQWidgetTab": {
  "Fn": "GuiAddQWidgetTab",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiAddQWidgetTab(params[\"qWidget\"].get\u003cvoid *\u003e()};\n",
  "Params": [
   {
    "Name": "qWidget",
    "Type": "*uintptr ",
    "CType": "void *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiAddRecentFile": {
  "Fn": "GuiAddRecentFile",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiAddRecentFile(params[\"file\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "file",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiAddStatusBarMessage": {
  "Fn": "GuiAddStatusBarMessage",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiAddStatusBarMessage(params[\"msg\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "msg",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiAutoCompleteAddCmd": {
  "Fn": "GuiAutoCompleteAddCmd",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiAutoCompleteAddCmd(params[\"cmd\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "cmd",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiAutoCompleteClearAll": {
  "Fn": "GuiAutoCompleteClearAll",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiAutoCompleteClearAll(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiAutoCompleteDelCmd": {
  "Fn": "GuiAutoCompleteDelCmd",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiAutoCompleteDelCmd(params[\"cmd\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "cmd",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiCloseApplication": {
  "Fn": "GuiCloseApplication",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiCloseApplication(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiCloseQWidgetTab": {
  "Fn": "GuiCloseQWidgetTab",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiCloseQWidgetTab(params[\"qWidget\"].get\u003cvoid *\u003e()};\n",
  "Params": [
   {
    "Name": "qWidget",
    "Type": "*uintptr ",
    "CType": "void *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiDisableLog": {
  "Fn": "GuiDisableLog",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiDisableLog(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiDisasmAt": {
  "Fn": "GuiDisasmAt",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiDisasmAt(params[\"addr\"].get\u003cduint\u003e(), params[\"cip\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "cip",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiDisplayWarning": {
  "Fn": "GuiDisplayWarning",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiDisplayWarning(params[\"title\"].get\u003cconst char *\u003e(), params[\"text\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "title",
    "Type": "string",
    "CType": "const char *"
   },
   {
    "Name": "text",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiDumpAt": {
  "Fn": "GuiDumpAt",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiDumpAt(params[\"va\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "va",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiDumpAtN": {
  "Fn": "GuiDumpAtN",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiDumpAtN(params[\"va\"].get\u003cduint\u003e(), params[\"index\"].get\u003cint\u003e()};\n",
  "Params": [
   {
    "Name": "va",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "index",
    "Type": "int",
    "CType": "int"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiEnableLog": {
  "Fn": "GuiEnableLog",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiEnableLog(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiExecuteOnGuiThread": {
  "Fn": "GuiExecuteOnGuiThread",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiExecuteOnGuiThread(params[\"cbGuiThread\"].get\u003cGUICALLBACK\u003e()};\n",
  "Params": [
   {
    "Name": "cbGuiThread",
    "Type": "uintptr",
    "CType": "GUICALLBACK"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiExecuteOnGuiThreadEx": {
  "Fn": "GuiExecuteOnGuiThreadEx",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiExecuteOnGuiThreadEx(params[\"cbGuiThread\"].get\u003cGUICALLBACKEX\u003e(), params[\"userdata\"].get\u003cvoid *\u003e()};\n",
  "Params": [
   {
    "Name": "cbGuiThread",
    "Type": "uintptr",
    "CType": "GUICALLBACKEX"
   },
   {
    "Name": "userdata",
    "Type": "*uintptr ",
    "CType": "void *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiFlushLog": {
  "Fn": "GuiFlushLog",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiFlushLog(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiFocusView": {
  "Fn": "GuiFocusView",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiFocusView(params[\"hWindow\"].get\u003cint\u003e()};\n",
  "Params": [
   {
    "Name": "hWindow",
    "Type": "int",
    "CType": "int"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiFoldDisassembly": {
  "Fn": "GuiFoldDisassembly",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiFoldDisassembly(params[\"startAddress\"].get\u003cduint\u003e(), params[\"length\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "startAddress",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "length",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiGetActiveView": {
  "Fn": "GuiGetActiveView",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiGetActiveView(params[\"activeView\"].get\u003cACTIVEVIEW *\u003e()};\n",
  "Params": [
   {
    "Name": "activeView",
    "Type": "*ACTIVEVIEW ",
    "CType": "ACTIVEVIEW *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiGetCurrentGraph": {
  "Fn": "GuiGetCurrentGraph",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiGetCurrentGraph(params[\"graphList\"].get\u003cBridgeCFGraphList *\u003e()};\n",
  "Params": [
   {
    "Name": "graphList",
    "Type": "*uintptr ",
    "CType": "BridgeCFGraphList *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiGetDebuggeeNotes": {
  "Fn": "GuiGetDebuggeeNotes",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiGetDebuggeeNotes(params[\"text\"].get\u003cchar **\u003e()};\n",
  "Params": [
   {
    "Name": "text",
    "Type": "*int8 ",
    "CType": "char **"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiGetDisassembly": {
  "Fn": "GuiGetDisassembly",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiGetDisassembly(params[\"addr\"].get\u003cduint\u003e(), params[\"text\"].get\u003cchar *\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "text",
    "Type": "*int8 ",
    "CType": "char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiGetGlobalNotes": {
  "Fn": "GuiGetGlobalNotes",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiGetGlobalNotes(params[\"text\"].get\u003cchar **\u003e()};\n",
  "Params": [
   {
    "Name": "text",
    "Type": "*int8 ",
    "CType": "char **"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiGetLineWindow": {
  "Fn": "GuiGetLineWindow",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiGetLineWindow(params[\"title\"].get\u003cconst char *\u003e(), params[\"text\"].get\u003cchar *\u003e()};\n",
  "Params": [
   {
    "Name": "title",
    "Type": "string",
    "CType": "const char *"
   },
   {
    "Name": "text",
    "Type": "*int8 ",
    "CType": "char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiGetMainThreadId": {
  "Fn": "GuiGetMainThreadId",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiGetMainThreadId(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiGetWindowHandle": {
  "Fn": "GuiGetWindowHandle",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiGetWindowHandle(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiGotoTrace": {
  "Fn": "GuiGotoTrace",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiGotoTrace(params[\"index\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "index",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiGraphAt": {
  "Fn": "GuiGraphAt",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiGraphAt(params[\"addr\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiInvalidateSymbolSource": {
  "Fn": "GuiInvalidateSymbolSource",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiInvalidateSymbolSource(params[\"base\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "base",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiIsLogEnabled": {
  "Fn": "GuiIsLogEnabled",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiIsLogEnabled(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiIsUpdateDisabled": {
  "Fn": "GuiIsUpdateDisabled",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiIsUpdateDisabled(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiLoadGraph": {
  "Fn": "GuiLoadGraph",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiLoadGraph(params[\"graph\"].get\u003cBridgeCFGraphList *\u003e(), params[\"addr\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "graph",
    "Type": "*uintptr ",
    "CType": "BridgeCFGraphList *"
   },
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiLoadSourceFileEx": {
  "Fn": "GuiLoadSourceFileEx",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiLoadSourceFileEx(params[\"path\"].get\u003cconst char *\u003e(), params[\"addr\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "path",
    "Type": "string",
    "CType": "const char *"
   },
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiLogClear": {
  "Fn": "GuiLogClear",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiLogClear(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiLogRedirect": {
  "Fn": "GuiLogRedirect",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiLogRedirect(params[\"filename\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "filename",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiLogRedirectStop": {
  "Fn": "GuiLogRedirectStop",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiLogRedirectStop(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiLogSave": {
  "Fn": "GuiLogSave",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiLogSave(params[\"filename\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "filename",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiMenuAdd": {
  "Fn": "GuiMenuAdd",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiMenuAdd(params[\"hMenu\"].get\u003cint\u003e(), params[\"title\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "hMenu",
    "Type": "int",
    "CType": "int"
   },
   {
    "Name": "title",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiMenuAddEntry": {
  "Fn": "GuiMenuAddEntry",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiMenuAddEntry(params[\"hMenu\"].get\u003cint\u003e(), params[\"title\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "hMenu",
    "Type": "int",
    "CType": "int"
   },
   {
    "Name": "title",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiMenuAddSeparator": {
  "Fn": "GuiMenuAddSeparator",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiMenuAddSeparator(params[\"hMenu\"].get\u003cint\u003e()};\n",
  "Params": [
   {
    "Name": "hMenu",
    "Type": "int",
    "CType": "int"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiMenuClear": {
  "Fn": "GuiMenuClear",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiMenuClear(params[\"hMenu\"].get\u003cint\u003e()};\n",
  "Params": [
   {
    "Name": "hMenu",
    "Type": "int",
    "CType": "int"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiMenuRemove": {
  "Fn": "GuiMenuRemove",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiMenuRemove(params[\"hEntryMenu\"].get\u003cint\u003e()};\n",
  "Params": [
   {
    "Name": "hEntryMenu",
    "Type": "int",
    "CType": "int"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiMenuSetEntryHotkey": {
  "Fn": "GuiMenuSetEntryHotkey",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiMenuSetEntryHotkey(params[\"hEntry\"].get\u003cint\u003e(), params[\"hack\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "hEntry",
    "Type": "int",
    "CType": "int"
   },
   {
    "Name": "hack",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiMenuSetEntryIcon": {
  "Fn": "GuiMenuSetEntryIcon",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiMenuSetEntryIcon(params[\"hEntry\"].get\u003cint\u003e(), params[\"icon\"].get\u003cconst ICONDATA *\u003e()};\n",
  "Params": [
   {
    "Name": "hEntry",
    "Type": "int",
    "CType": "int"
   },
   {
    "Name": "icon",
    "Type": "*ICONDATA ",
    "CType": "const ICONDATA *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiMenuSetEntryName": {
  "Fn": "GuiMenuSetEntryName",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiMenuSetEntryName(params[\"hEntry\"].get\u003cint\u003e(), params[\"name\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "hEntry",
    "Type": "int",
    "CType": "int"
   },
   {
    "Name": "name",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiMenuSetIcon": {
  "Fn": "GuiMenuSetIcon",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiMenuSetIcon(params[\"hMenu\"].get\u003cint\u003e(), params[\"icon\"].get\u003cconst ICONDATA *\u003e()};\n",
  "Params": [
   {
    "Name": "hMenu",
    "Type": "int",
    "CType": "int"
   },
   {
    "Name": "icon",
    "Type": "*ICONDATA ",
    "CType": "const ICONDATA *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiMenuSetName": {
  "Fn": "GuiMenuSetName",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiMenuSetName(params[\"hMenu\"].get\u003cint\u003e(), params[\"name\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "hMenu",
    "Type": "int",
    "CType": "int"
   },
   {
    "Name": "name",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiOpenTraceFile": {
  "Fn": "GuiOpenTraceFile",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiOpenTraceFile(params[\"fileName\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "fileName",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiProcessEvents": {
  "Fn": "GuiProcessEvents",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiProcessEvents(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiReferenceAddColumn": {
  "Fn": "GuiReferenceAddColumn",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiReferenceAddColumn(params[\"width\"].get\u003cint\u003e(), params[\"title\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "width",
    "Type": "int",
    "CType": "int"
   },
   {
    "Name": "title",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiReferenceAddCommand": {
  "Fn": "GuiReferenceAddCommand",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiReferenceAddCommand(params[\"title\"].get\u003cconst char *\u003e(), params[\"command\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "title",
    "Type": "string",
    "CType": "const char *"
   },
   {
    "Name": "command",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiReferenceDeleteAllColumns": {
  "Fn": "GuiReferenceDeleteAllColumns",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiReferenceDeleteAllColumns(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiReferenceGetCellContent": {
  "Fn": "GuiReferenceGetCellContent",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiReferenceGetCellContent(params[\"row\"].get\u003cint\u003e(), params[\"col\"].get\u003cint\u003e()};\n",
  "Params": [
   {
    "Name": "row",
    "Type": "int",
    "CType": "int"
   },
   {
    "Name": "col",
    "Type": "int",
    "CType": "int"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiReferenceGetRowCount": {
  "Fn": "GuiReferenceGetRowCount",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiReferenceGetRowCount(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiReferenceInitialize": {
  "Fn": "GuiReferenceInitialize",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiReferenceInitialize(params[\"name\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "name",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiReferenceReloadData": {
  "Fn": "GuiReferenceReloadData",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiReferenceReloadData(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiReferenceSearchGetCellContent": {
  "Fn": "GuiReferenceSearchGetCellContent",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiReferenceSearchGetCellContent(params[\"row\"].get\u003cint\u003e(), params[\"col\"].get\u003cint\u003e()};\n",
  "Params": [
   {
    "Name": "row",
    "Type": "int",
    "CType": "int"
   },
   {
    "Name": "col",
    "Type": "int",
    "CType": "int"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiReferenceSearchGetRowCount": {
  "Fn": "GuiReferenceSearchGetRowCount",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiReferenceSearchGetRowCount(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiReferenceSetCellContent": {
  "Fn": "GuiReferenceSetCellContent",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiReferenceSetCellContent(params[\"row\"].get\u003cint\u003e(), params[\"col\"].get\u003cint\u003e(), params[\"str\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "row",
    "Type": "int",
    "CType": "int"
   },
   {
    "Name": "col",
    "Type": "int",
    "CType": "int"
   },
   {
    "Name": "str",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiReferenceSetCurrentTaskProgress": {
  "Fn": "GuiReferenceSetCurrentTaskProgress",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiReferenceSetCurrentTaskProgress(params[\"progress\"].get\u003cint\u003e(), params[\"taskTitle\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "progress",
    "Type": "int",
    "CType": "int"
   },
   {
    "Name": "taskTitle",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiReferenceSetProgress": {
  "Fn": "GuiReferenceSetProgress",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiReferenceSetProgress(params[\"progress\"].get\u003cint\u003e()};\n",
  "Params": [
   {
    "Name": "progress",
    "Type": "int",
    "CType": "int"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiReferenceSetRowCount": {
  "Fn": "GuiReferenceSetRowCount",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiReferenceSetRowCount(params[\"count\"].get\u003cint\u003e()};\n",
  "Params": [
   {
    "Name": "count",
    "Type": "int",
    "CType": "int"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiReferenceSetSearchStartCol": {
  "Fn": "GuiReferenceSetSearchStartCol",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiReferenceSetSearchStartCol(params[\"col\"].get\u003cint\u003e()};\n",
  "Params": [
   {
    "Name": "col",
    "Type": "int",
    "CType": "int"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiRegisterScriptLanguage": {
  "Fn": "GuiRegisterScriptLanguage",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiRegisterScriptLanguage(params[\"info\"].get\u003cSCRIPTTYPEINFO *\u003e()};\n",
  "Params": [
   {
    "Name": "info",
    "Type": "*SCRIPTTYPEINFO ",
    "CType": "SCRIPTTYPEINFO *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiRepaintTableView": {
  "Fn": "GuiRepaintTableView",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiRepaintTableView(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiScriptAdd": {
  "Fn": "GuiScriptAdd",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiScriptAdd(params[\"count\"].get\u003cint\u003e(), params[\"lines\"].get\u003cconst char **\u003e()};\n",
  "Params": [
   {
    "Name": "count",
    "Type": "int",
    "CType": "int"
   },
   {
    "Name": "lines",
    "Type": "*string",
    "CType": "const char **"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiScriptClear": {
  "Fn": "GuiScriptClear",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiScriptClear(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiScriptError": {
  "Fn": "GuiScriptError",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiScriptError(params[\"line\"].get\u003cint\u003e(), params[\"message\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "line",
    "Type": "int",
    "CType": "int"
   },
   {
    "Name": "message",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiScriptMessage": {
  "Fn": "GuiScriptMessage",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiScriptMessage(params[\"message\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "message",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiScriptMsgyn": {
  "Fn": "GuiScriptMsgyn",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiScriptMsgyn(params[\"message\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "message",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiScriptSetInfoLine": {
  "Fn": "GuiScriptSetInfoLine",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiScriptSetInfoLine(params[\"line\"].get\u003cint\u003e(), params[\"info\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "line",
    "Type": "int",
    "CType": "int"
   },
   {
    "Name": "info",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiScriptSetIp": {
  "Fn": "GuiScriptSetIp",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiScriptSetIp(params[\"line\"].get\u003cint\u003e()};\n",
  "Params": [
   {
    "Name": "line",
    "Type": "int",
    "CType": "int"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiScriptSetTitle": {
  "Fn": "GuiScriptSetTitle",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiScriptSetTitle(params[\"title\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "title",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiSelectInMemoryMap": {
  "Fn": "GuiSelectInMemoryMap",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiSelectInMemoryMap(params[\"addr\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiSelectInSymbolsTab": {
  "Fn": "GuiSelectInSymbolsTab",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiSelectInSymbolsTab(params[\"addr\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiSelectionGet": {
  "Fn": "GuiSelectionGet",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiSelectionGet(params[\"hWindow\"].get\u003cGUISELECTIONTYPE\u003e(), params[\"selection\"].get\u003cSELECTIONDATA *\u003e()};\n",
  "Params": [
   {
    "Name": "hWindow",
    "Type": "GUISELECTIONTYPE",
    "CType": "GUISELECTIONTYPE"
   },
   {
    "Name": "selection",
    "Type": "*SELECTIONDATA ",
    "CType": "SELECTIONDATA *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiSelectionSet": {
  "Fn": "GuiSelectionSet",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiSelectionSet(params[\"hWindow\"].get\u003cGUISELECTIONTYPE\u003e(), params[\"selection\"].get\u003cconst SELECTIONDATA *\u003e()};\n",
  "Params": [
   {
    "Name": "hWindow",
    "Type": "GUISELECTIONTYPE",
    "CType": "GUISELECTIONTYPE"
   },
   {
    "Name": "selection",
    "Type": "*SELECTIONDATA ",
    "CType": "const SELECTIONDATA *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiSetDebugState": {
  "Fn": "GuiSetDebugState",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiSetDebugState(params[\"state\"].get\u003cDBGSTATE\u003e()};\n",
  "Params": [
   {
    "Name": "state",
    "Type": "DBGSTATE",
    "CType": "DBGSTATE"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiSetDebugStateFast": {
  "Fn": "GuiSetDebugStateFast",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiSetDebugStateFast(params[\"state\"].get\u003cDBGSTATE\u003e()};\n",
  "Params": [
   {
    "Name": "state",
    "Type": "DBGSTATE",
    "CType": "DBGSTATE"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiSetDebuggeeNotes": {
  "Fn": "GuiSetDebuggeeNotes",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiSetDebuggeeNotes(params[\"text\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "text",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiSetFavouriteToolShortcut": {
  "Fn": "GuiSetFavouriteToolShortcut",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiSetFavouriteToolShortcut(params[\"name\"].get\u003cconst char *\u003e(), params[\"shortcut\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "name",
    "Type": "string",
    "CType": "const char *"
   },
   {
    "Name": "shortcut",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiSetGlobalNotes": {
  "Fn": "GuiSetGlobalNotes",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiSetGlobalNotes(params[\"text\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "text",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiSetLastException": {
  "Fn": "GuiSetLastException",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiSetLastException(params[\"exception\"].get\u003cunsigned int\u003e()};\n",
  "Params": [
   {
    "Name": "exception",
    "Type": "uint",
    "CType": "unsigned int"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiShowCpu": {
  "Fn": "GuiShowCpu",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiShowCpu(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiShowQWidgetTab": {
  "Fn": "GuiShowQWidgetTab",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiShowQWidgetTab(params[\"qWidget\"].get\u003cvoid *\u003e()};\n",
  "Params": [
   {
    "Name": "qWidget",
    "Type": "*uintptr ",
    "CType": "void *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiShowReferences": {
  "Fn": "GuiShowReferences",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiShowReferences(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiShowThreads": {
  "Fn": "GuiShowThreads",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiShowThreads(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiShowTrace": {
  "Fn": "GuiShowTrace",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiShowTrace(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiStackDumpAt": {
  "Fn": "GuiStackDumpAt",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiStackDumpAt(params[\"addr\"].get\u003cduint\u003e(), params[\"csp\"].get\u003cduint\u003e()};\n",
  "Params": [
   {
    "Name": "addr",
    "Type": "uint",
    "CType": "duint"
   },
   {
    "Name": "csp",
    "Type": "uint",
    "CType": "duint"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiSymbolLogAdd": {
  "Fn": "GuiSymbolLogAdd",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiSymbolLogAdd(params[\"message\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "message",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiSymbolLogClear": {
  "Fn": "GuiSymbolLogClear",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiSymbolLogClear(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiSymbolRefreshCurrent": {
  "Fn": "GuiSymbolRefreshCurrent",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiSymbolRefreshCurrent(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiSymbolSetProgress": {
  "Fn": "GuiSymbolSetProgress",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiSymbolSetProgress(params[\"percent\"].get\u003cint\u003e()};\n",
  "Params": [
   {
    "Name": "percent",
    "Type": "int",
    "CType": "int"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiSymbolUpdateModuleList": {
  "Fn": "GuiSymbolUpdateModuleList",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiSymbolUpdateModuleList(params[\"count\"].get\u003cint\u003e(), params[\"modules\"].get\u003cSYMBOLMODULEINFO *\u003e()};\n",
  "Params": [
   {
    "Name": "count",
    "Type": "int",
    "CType": "int"
   },
   {
    "Name": "modules",
    "Type": "*SYMBOLMODULEINFO ",
    "CType": "SYMBOLMODULEINFO *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiTranslateText": {
  "Fn": "GuiTranslateText",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiTranslateText(params[\"Source\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "Source",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiTypeAddNode": {
  "Fn": "GuiTypeAddNode",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiTypeAddNode(params[\"parent\"].get\u003cvoid *\u003e(), params[\"Type\"].get\u003cconst TYPEDESCRIPTOR *\u003e()};\n",
  "Params": [
   {
    "Name": "parent",
    "Type": "*uintptr ",
    "CType": "void *"
   },
   {
    "Name": "Type",
    "Type": "*uintptr ",
    "CType": "const TYPEDESCRIPTOR *"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiTypeClear": {
  "Fn": "GuiTypeClear",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiTypeClear(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiUnregisterScriptLanguage": {
  "Fn": "GuiUnregisterScriptLanguage",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiUnregisterScriptLanguage(params[\"id\"].get\u003cint\u003e()};\n",
  "Params": [
   {
    "Name": "id",
    "Type": "int",
    "CType": "int"
   }
  ],
  "ReturnType": ""
 },
 "/bridgemain.h/GuiUpdateAllViews": {
  "Fn": "GuiUpdateAllViews",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiUpdateAllViews(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiUpdateArgumentWidget": {
  "Fn": "GuiUpdateArgumentWidget",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiUpdateArgumentWidget(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiUpdateBreakpointsView": {
  "Fn": "GuiUpdateBreakpointsView",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiUpdateBreakpointsView(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiUpdateCallStack": {
  "Fn": "GuiUpdateCallStack",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiUpdateCallStack(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiUpdateDisable": {
  "Fn": "GuiUpdateDisable",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiUpdateDisable(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiUpdateDisassemblyView": {
  "Fn": "GuiUpdateDisassemblyView",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiUpdateDisassemblyView(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiUpdateDumpView": {
  "Fn": "GuiUpdateDumpView",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiUpdateDumpView(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiUpdateGraphView": {
  "Fn": "GuiUpdateGraphView",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiUpdateGraphView(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiUpdateMemoryView": {
  "Fn": "GuiUpdateMemoryView",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiUpdateMemoryView(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiUpdatePatches": {
  "Fn": "GuiUpdatePatches",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiUpdatePatches(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiUpdateRegisterView": {
  "Fn": "GuiUpdateRegisterView",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiUpdateRegisterView(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiUpdateSEHChain": {
  "Fn": "GuiUpdateSEHChain",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiUpdateSEHChain(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiUpdateSideBar": {
  "Fn": "GuiUpdateSideBar",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiUpdateSideBar(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiUpdateThreadView": {
  "Fn": "GuiUpdateThreadView",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiUpdateThreadView(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiUpdateTimeWastedCounter": {
  "Fn": "GuiUpdateTimeWastedCounter",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiUpdateTimeWastedCounter(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiUpdateTraceBrowser": {
  "Fn": "GuiUpdateTraceBrowser",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiUpdateTraceBrowser(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiUpdateTypeWidget": {
  "Fn": "GuiUpdateTypeWidget",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiUpdateTypeWidget(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiUpdateWatchView": {
  "Fn": "GuiUpdateWatchView",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiUpdateWatchView(};\n",
  "Params": null,
  "ReturnType": ""
 },
 "/bridgemain.h/GuiUpdateWindowTitle": {
  "Fn": "GuiUpdateWindowTitle",
  "Do": "ApiResponse resp{.success = true, .type = \"\", .result = GuiUpdateWindowTitle(params[\"filename\"].get\u003cconst char *\u003e()};\n",
  "Params": [
   {
    "Name": "filename",
    "Type": "string",
    "CType": "const char *"
   }
  ],
  "ReturnType": ""
 }
}