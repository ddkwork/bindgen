
#pragma once

typedef enum _PAGING_LEVEL {
  PagingLevelPageTable = 0,
  PagingLevelPageDirectory,
  PagingLevelPageDirectoryPointerTable,
  PagingLevelPageMapLevel4
} PAGING_LEVEL;

typedef enum _POOL_ALLOCATION_INTENTION {
  TRACKING_HOOKED_PAGES,
  EXEC_TRAMPOLINE,
  SPLIT_2MB_PAGING_TO_4KB_PAGE,
  DETOUR_HOOK_DETAILS,
  BREAKPOINT_DEFINITION_STRUCTURE,
  PROCESS_THREAD_HOLDER,
  INSTANT_REGULAR_EVENT_BUFFER,
  INSTANT_BIG_EVENT_BUFFER,
  INSTANT_REGULAR_EVENT_ACTION_BUFFER,
  INSTANT_BIG_EVENT_ACTION_BUFFER,
  INSTANT_REGULAR_SAFE_BUFFER_FOR_EVENTS,
  INSTANT_BIG_SAFE_BUFFER_FOR_EVENTS,
} POOL_ALLOCATION_INTENTION;

typedef enum _DEBUG_REGISTER_TYPE {
  BREAK_ON_INSTRUCTION_FETCH,
  BREAK_ON_WRITE_ONLY,
  BREAK_ON_IO_READ_OR_WRITE_NOT_SUPPORTED,
  BREAK_ON_READ_AND_WRITE_BUT_NOT_FETCH
} DEBUG_REGISTER_TYPE;

typedef enum _VMX_EXECUTION_MODE {
  VmxExecutionModeNonRoot = FALSE,
  VmxExecutionModeRoot = TRUE
} VMX_EXECUTION_MODE;

typedef enum _VMM_CALLBACK_EVENT_CALLING_STAGE_TYPE {
  VMM_CALLBACK_CALLING_STAGE_INVALID_EVENT_EMULATION = 0,
  VMM_CALLBACK_CALLING_STAGE_PRE_EVENT_EMULATION = 1,
  VMM_CALLBACK_CALLING_STAGE_POST_EVENT_EMULATION = 2,
  VMM_CALLBACK_CALLING_STAGE_ALL_EVENT_EMULATION = 3
} VMM_CALLBACK_EVENT_CALLING_STAGE_TYPE;

typedef enum _DEBUGGER_THREAD_PROCESS_TRACING {
  DEBUGGER_THREAD_PROCESS_TRACING_INTERCEPT_CLOCK_INTERRUPTS_FOR_THREAD_CHANGE,
  DEBUGGER_THREAD_PROCESS_TRACING_INTERCEPT_CLOCK_INTERRUPTS_FOR_PROCESS_CHANGE,
  DEBUGGER_THREAD_PROCESS_TRACING_INTERCEPT_CLOCK_DEBUG_REGISTER_INTERCEPTION,
  DEBUGGER_THREAD_PROCESS_TRACING_INTERCEPT_CLOCK_WAITING_FOR_MOV_CR3_VM_EXITS,
} DEBUGGER_THREAD_PROCESS_TRACING;

typedef int (*SendMessageWithParamCallback)(const char *Text);

typedef int (*SendMessageWWithSharedBufferCallback)();

typedef struct _DEBUGGEE_USER_INPUT_PACKET {
  UINT32 CommandLen;
  BOOLEAN IgnoreFinishedSignal;
  UINT32 Result;
} DEBUGGEE_USER_INPUT_PACKET, *PDEBUGGEE_USER_INPUT_PACKET;

typedef struct _DEBUGGEE_EVENT_AND_ACTION_HEADER_FOR_REMOTE_PACKET {
  UINT32 Length;
} DEBUGGEE_EVENT_AND_ACTION_HEADER_FOR_REMOTE_PACKET,
    *PDEBUGGEE_EVENT_AND_ACTION_HEADER_FOR_REMOTE_PACKET;

#define SIZEOF_DEBUGGER_PAUSE_PACKET_RECEIVED \
  sizeof(DEBUGGER_PAUSE_PACKET_RECEIVED)

typedef struct _DEBUGGER_PAUSE_PACKET_RECEIVED {
  UINT32 Result;
} DEBUGGER_PAUSE_PACKET_RECEIVED, *PDEBUGGER_PAUSE_PACKET_RECEIVED;

typedef struct _DEBUGGER_TRIGGERED_EVENT_DETAILS {
  UINT64 Tag;
  PVOID Context;
  VMM_CALLBACK_EVENT_CALLING_STAGE_TYPE Stage;
} DEBUGGER_TRIGGERED_EVENT_DETAILS, *PDEBUGGER_TRIGGERED_EVENT_DETAILS;

typedef struct _DEBUGGEE_KD_PAUSED_PACKET {
  UINT64 Rip;
  BOOLEAN IsProcessorOn32BitMode;
  BOOLEAN IgnoreDisassembling;
  DEBUGGEE_PAUSING_REASON PausingReason;
  ULONG CurrentCore;
  UINT64 EventTag;
  VMM_CALLBACK_EVENT_CALLING_STAGE_TYPE EventCallingStage;
  UINT64 Rflags;
  BYTE InstructionBytesOnRip[MAXIMUM_INSTR_SIZE];
  UINT16 ReadInstructionLen;
} DEBUGGEE_KD_PAUSED_PACKET, *PDEBUGGEE_KD_PAUSED_PACKET;

typedef struct _DEBUGGEE_UD_PAUSED_PACKET {
  UINT64 Rip;
  UINT64 ProcessDebuggingToken;
  BOOLEAN Is32Bit;
  DEBUGGEE_PAUSING_REASON PausingReason;
  UINT32 ProcessId;
  UINT32 ThreadId;
  UINT64 Rflags;
  UINT64 EventTag;
  VMM_CALLBACK_EVENT_CALLING_STAGE_TYPE EventCallingStage;
  BYTE InstructionBytesOnRip[MAXIMUM_INSTR_SIZE];
  UINT16 ReadInstructionLen;
  GUEST_REGS GuestRegs;
} DEBUGGEE_UD_PAUSED_PACKET, *PDEBUGGEE_UD_PAUSED_PACKET;

typedef enum _NOTIFY_TYPE { IRP_BASED, EVENT_BASED } NOTIFY_TYPE;

typedef struct _DEBUGGEE_MESSAGE_PACKET {
  UINT32 OperationCode;
  CHAR Message[PacketChunkSize];
} DEBUGGEE_MESSAGE_PACKET, *PDEBUGGEE_MESSAGE_PACKET;

typedef struct _REGISTER_NOTIFY_BUFFER {
  NOTIFY_TYPE Type;
  HANDLE hEvent;
} REGISTER_NOTIFY_BUFFER, *PREGISTER_NOTIFY_BUFFER;

typedef struct _DIRECT_VMCALL_PARAMETERS {
  UINT64 OptionalParam1;
  UINT64 OptionalParam2;
  UINT64 OptionalParam3;
} DIRECT_VMCALL_PARAMETERS, *PDIRECT_VMCALL_PARAMETERS;

typedef enum _DEBUGGER_HOOK_MEMORY_TYPE {
  DEBUGGER_MEMORY_HOOK_VIRTUAL_ADDRESS,
  DEBUGGER_MEMORY_HOOK_PHYSICAL_ADDRESS
} DEBUGGER_HOOK_MEMORY_TYPE;

typedef struct _EPT_HOOKS_CONTEXT {
  UINT64 HookingTag;
  UINT64 PhysicalAddress;
  UINT64 VirtualAddress;
} EPT_HOOKS_CONTEXT, *PEPT_HOOKS_CONTEXT;

typedef struct _EPT_HOOKS_ADDRESS_DETAILS_FOR_MEMORY_MONITOR {
  UINT64 StartAddress;
  UINT64 EndAddress;
  BOOLEAN SetHookForRead;
  BOOLEAN SetHookForWrite;
  BOOLEAN SetHookForExec;
  DEBUGGER_HOOK_MEMORY_TYPE MemoryType;
  UINT64 Tag;
} EPT_HOOKS_ADDRESS_DETAILS_FOR_MEMORY_MONITOR,
    *PEPT_HOOKS_ADDRESS_DETAILS_FOR_MEMORY_MONITOR;

typedef struct _EPT_HOOKS_ADDRESS_DETAILS_FOR_EPTHOOK2 {
  PVOID TargetAddress;
  PVOID HookFunction;
} EPT_HOOKS_ADDRESS_DETAILS_FOR_EPTHOOK2,
    *PEPT_HOOKS_ADDRESS_DETAILS_FOR_EPTHOOK2;

typedef struct _EPT_SINGLE_HOOK_UNHOOKING_DETAILS {
  BOOLEAN CallerNeedsToRestoreEntryAndInvalidateEpt;
  BOOLEAN RemoveBreakpointInterception;
  SIZE_T PhysicalAddress;
  UINT64 OriginalEntry;
} EPT_SINGLE_HOOK_UNHOOKING_DETAILS, *PEPT_SINGLE_HOOK_UNHOOKING_DETAILS;

typedef union {
  struct {
    UINT32 Type : 4;

    UINT32 DescriptorType : 1;

    UINT32 DescriptorPrivilegeLevel : 2;

    UINT32 Present : 1;
    UINT32 Reserved1 : 4;

    UINT32 AvailableBit : 1;

    UINT32 LongMode : 1;

    UINT32 DefaultBig : 1;

    UINT32 Granularity : 1;

    UINT32 Unusable : 1;
    UINT32 Reserved2 : 15;
  };

  UINT32 AsUInt;
} VMX_SEGMENT_ACCESS_RIGHTS_TYPE;

typedef struct _VMX_SEGMENT_SELECTOR {
  UINT16 Selector;
  VMX_SEGMENT_ACCESS_RIGHTS_TYPE Attributes;
  UINT32 Limit;
  UINT64 Base;
} VMX_SEGMENT_SELECTOR, *PVMX_SEGMENT_SELECTOR;
