
#pragma once

typedef enum _EXCEPTION_VECTORS {
  EXCEPTION_VECTOR_DIVIDE_ERROR,
  EXCEPTION_VECTOR_DEBUG_BREAKPOINT,
  EXCEPTION_VECTOR_NMI,
  EXCEPTION_VECTOR_BREAKPOINT,
  EXCEPTION_VECTOR_OVERFLOW,
  EXCEPTION_VECTOR_BOUND_RANGE_EXCEEDED,
  EXCEPTION_VECTOR_UNDEFINED_OPCODE,
  EXCEPTION_VECTOR_NO_MATH_COPROCESSOR,
  EXCEPTION_VECTOR_DOUBLE_FAULT,
  EXCEPTION_VECTOR_RESERVED0,
  EXCEPTION_VECTOR_INVALID_TASK_SEGMENT_SELECTOR,
  EXCEPTION_VECTOR_SEGMENT_NOT_PRESENT,
  EXCEPTION_VECTOR_STACK_SEGMENT_FAULT,
  EXCEPTION_VECTOR_GENERAL_PROTECTION_FAULT,
  EXCEPTION_VECTOR_PAGE_FAULT,
  EXCEPTION_VECTOR_RESERVED1,
  EXCEPTION_VECTOR_MATH_FAULT,
  EXCEPTION_VECTOR_ALIGNMENT_CHECK,
  EXCEPTION_VECTOR_MACHINE_CHECK,
  EXCEPTION_VECTOR_SIMD_FLOATING_POINT_NUMERIC_ERROR,
  EXCEPTION_VECTOR_VIRTUAL_EXCEPTION,
  EXCEPTION_VECTOR_RESERVED2,
  EXCEPTION_VECTOR_RESERVED3,
  EXCEPTION_VECTOR_RESERVED4,
  EXCEPTION_VECTOR_RESERVED5,
  EXCEPTION_VECTOR_RESERVED6,
  EXCEPTION_VECTOR_RESERVED7,
  EXCEPTION_VECTOR_RESERVED8,
  EXCEPTION_VECTOR_RESERVED9,
  EXCEPTION_VECTOR_RESERVED10,
  EXCEPTION_VECTOR_RESERVED11,
  EXCEPTION_VECTOR_RESERVED12,
  APC_INTERRUPT = 31,
  DPC_INTERRUPT = 47,
  CLOCK_INTERRUPT = 209,
  IPI_INTERRUPT = 225,
  PMI_INTERRUPT = 254,
} EXCEPTION_VECTORS;

typedef enum _VMM_CALLBACK_TRIGGERING_EVENT_STATUS_TYPE {
  VMM_CALLBACK_TRIGGERING_EVENT_STATUS_SUCCESSFUL_NO_INITIALIZED = 0,
  VMM_CALLBACK_TRIGGERING_EVENT_STATUS_SUCCESSFUL = 0,
  VMM_CALLBACK_TRIGGERING_EVENT_STATUS_SUCCESSFUL_IGNORE_EVENT = 1,
  VMM_CALLBACK_TRIGGERING_EVENT_STATUS_DEBUGGER_NOT_ENABLED = 2,
  VMM_CALLBACK_TRIGGERING_EVENT_STATUS_INVALID_EVENT_TYPE = 3,
} VMM_CALLBACK_TRIGGERING_EVENT_STATUS_TYPE;

typedef enum _VMM_EVENT_TYPE_ENUM {
  HIDDEN_HOOK_READ_AND_WRITE_AND_EXECUTE,
  HIDDEN_HOOK_READ_AND_WRITE,
  HIDDEN_HOOK_READ_AND_EXECUTE,
  HIDDEN_HOOK_WRITE_AND_EXECUTE,
  HIDDEN_HOOK_READ,
  HIDDEN_HOOK_WRITE,
  HIDDEN_HOOK_EXECUTE,
  HIDDEN_HOOK_EXEC_DETOURS,
  HIDDEN_HOOK_EXEC_CC,
  SYSCALL_HOOK_EFER_SYSCALL,
  SYSCALL_HOOK_EFER_SYSRET,
  CPUID_INSTRUCTION_EXECUTION,
  RDMSR_INSTRUCTION_EXECUTION,
  WRMSR_INSTRUCTION_EXECUTION,
  IN_INSTRUCTION_EXECUTION,
  OUT_INSTRUCTION_EXECUTION,
  EXCEPTION_OCCURRED,
  EXTERNAL_INTERRUPT_OCCURRED,
  DEBUG_REGISTERS_ACCESSED,
  TSC_INSTRUCTION_EXECUTION,
  PMC_INSTRUCTION_EXECUTION,
  VMCALL_INSTRUCTION_EXECUTION,
  CONTROL_REGISTER_MODIFIED,
  CONTROL_REGISTER_READ,
  CONTROL_REGISTER_3_MODIFIED,
  TRAP_EXECUTION_MODE_CHANGED,
  TRAP_EXECUTION_INSTRUCTION_TRACE,
} VMM_EVENT_TYPE_ENUM;

typedef enum _DEBUGGER_EVENT_ACTION_TYPE_ENUM {
  BREAK_TO_DEBUGGER,
  RUN_SCRIPT,
  RUN_CUSTOM_CODE
} DEBUGGER_EVENT_ACTION_TYPE_ENUM;

typedef enum _DEBUGGER_EVENT_SYSCALL_SYSRET_TYPE {
  DEBUGGER_EVENT_SYSCALL_SYSRET_SAFE_ACCESS_MEMORY = 0,
  DEBUGGER_EVENT_SYSCALL_SYSRET_HANDLE_ALL_UD = 1,
} DEBUGGER_EVENT_SYSCALL_SYSRET_TYPE;

#define SIZEOF_DEBUGGER_MODIFY_EVENTS sizeof(DEBUGGER_MODIFY_EVENTS)

typedef enum _DEBUGGER_EVENT_MODE_TYPE {
  DEBUGGER_EVENT_MODE_TYPE_USER_MODE_AND_KERNEL_MODE = 1,
  DEBUGGER_EVENT_MODE_TYPE_USER_MODE = 3,
  DEBUGGER_EVENT_MODE_TYPE_KERNEL_MODE = 0,
  DEBUGGER_EVENT_MODE_TYPE_INVALID = 0xffffffff,
} DEBUGGER_EVENT_MODE_TYPE;

typedef enum _DEBUGGER_EVENT_TRACE_TYPE {
  DEBUGGER_EVENT_TRACE_TYPE_INVALID = 0,
  DEBUGGER_EVENT_TRACE_TYPE_STEP_IN = 1,
  DEBUGGER_EVENT_TRACE_TYPE_STEP_OUT = 2,
  DEBUGGER_EVENT_TRACE_TYPE_INSTRUMENTATION_STEP_IN = 3,
} DEBUGGER_EVENT_TRACE_TYPE;

typedef enum _DEBUGGER_MODIFY_EVENTS_TYPE {
  DEBUGGER_MODIFY_EVENTS_QUERY_STATE,
  DEBUGGER_MODIFY_EVENTS_ENABLE,
  DEBUGGER_MODIFY_EVENTS_DISABLE,
  DEBUGGER_MODIFY_EVENTS_CLEAR,
} DEBUGGER_MODIFY_EVENTS_TYPE;

typedef struct _DEBUGGER_MODIFY_EVENTS {
  UINT64 Tag;
  UINT64 KernelStatus;
  DEBUGGER_MODIFY_EVENTS_TYPE
  TypeOfAction;
  BOOLEAN IsEnabled;
} DEBUGGER_MODIFY_EVENTS, *PDEBUGGER_MODIFY_EVENTS;

typedef struct _DEBUGGER_SHORT_CIRCUITING_EVENT {
  UINT64 KernelStatus;
  BOOLEAN IsShortCircuiting;
} DEBUGGER_SHORT_CIRCUITING_EVENT, *PDEBUGGER_SHORT_CIRCUITING_EVENT;

typedef struct _DEBUGGER_EVENT_OPTIONS {
  UINT64 OptionalParam1;
  UINT64 OptionalParam2;
  UINT64 OptionalParam3;
  UINT64 OptionalParam4;
  UINT64 OptionalParam5;
  UINT64 OptionalParam6;
} DEBUGGER_EVENT_OPTIONS, *PDEBUGGER_EVENT_OPTIONS;

typedef enum _PROTECTED_HV_RESOURCES_PASSING_OVERS {
  PASSING_OVER_NONE = 0,
  PASSING_OVER_UD_EXCEPTIONS_FOR_SYSCALL_SYSRET_HOOK = 1,
  PASSING_OVER_EXCEPTION_EVENTS,
  PASSING_OVER_INTERRUPT_EVENTS,
  PASSING_OVER_TSC_EVENTS,
  PASSING_OVER_MOV_TO_HW_DEBUG_REGS_EVENTS,
  PASSING_OVER_MOV_TO_CONTROL_REGS_EVENTS,
} PROTECTED_HV_RESOURCES_PASSING_OVERS;

typedef enum _PROTECTED_HV_RESOURCES_TYPE {
  PROTECTED_HV_RESOURCES_EXCEPTION_BITMAP,
  PROTECTED_HV_RESOURCES_EXTERNAL_INTERRUPT_EXITING,
  PROTECTED_HV_RESOURCES_RDTSC_RDTSCP_EXITING,
  PROTECTED_HV_RESOURCES_MOV_TO_DEBUG_REGISTER_EXITING,
  PROTECTED_HV_RESOURCES_MOV_CONTROL_REGISTER_EXITING,
  PROTECTED_HV_RESOURCES_MOV_TO_CR3_EXITING,
} PROTECTED_HV_RESOURCES_TYPE;

typedef struct _DEBUGGER_GENERAL_EVENT_DETAIL {
  LIST_ENTRY
  CommandsEventList;
  time_t CreationTime;
  UINT32 CoreId;
  UINT32 ProcessId;
  BOOLEAN IsEnabled;
  BOOLEAN EnableShortCircuiting;
  VMM_CALLBACK_EVENT_CALLING_STAGE_TYPE EventStage;
  BOOLEAN HasCustomOutput;
  UINT64
  OutputSourceTags[DebuggerOutputSourceMaximumRemoteSourceForSingleEvent];
  UINT32 CountOfActions;
  UINT64 Tag;
  VMM_EVENT_TYPE_ENUM EventType;
  DEBUGGER_EVENT_OPTIONS Options;
  PVOID CommandStringBuffer;
  UINT32 ConditionBufferSize;
} DEBUGGER_GENERAL_EVENT_DETAIL, *PDEBUGGER_GENERAL_EVENT_DETAIL;

typedef struct _DEBUGGER_GENERAL_ACTION {
  UINT64 EventTag;
  DEBUGGER_EVENT_ACTION_TYPE_ENUM ActionType;
  BOOLEAN ImmediateMessagePassing;
  UINT32 PreAllocatedBuffer;
  UINT32 CustomCodeBufferSize;
  UINT32 ScriptBufferSize;
  UINT32 ScriptBufferPointer;
} DEBUGGER_GENERAL_ACTION, *PDEBUGGER_GENERAL_ACTION;

typedef struct _DEBUGGER_EVENT_AND_ACTION_RESULT {
  BOOLEAN IsSuccessful;
  UINT32 Error;
} DEBUGGER_EVENT_AND_ACTION_RESULT, *PDEBUGGER_EVENT_AND_ACTION_RESULT;

#define SIZEOF_REGISTER_EVENT sizeof(REGISTER_NOTIFY_BUFFER)
